{"version":3,"file":"index.bundle.js","mappings":"whCAAAA,SAASC,iBAAiB,oBAAoB,WAE3C,IAAIC,EAAMC,GAAGC,OAAO,OACpBF,EAAIG,KAAK,WAAY,UAIrB,IAAMC,EAAuBN,SAASO,cAAc,sBACpDC,QAAQC,IAAI,oBAAqBH,GACNN,SAASU,eAAe,iBAG9BV,SAASW,iBAAiB,wBAClCC,SAAQ,SAAAC,GACpBA,EAAMZ,iBAAiB,SAAS,SAASa,GAErCC,EAAYF,EAAMG,IAElB,IAAMC,EAAWH,EAAMI,OAAOC,MAI9BC,EAAoBP,EAAMG,GAAIC,EAAU,CAAEI,QAAS,SAAUC,WAAY,SAC7E,GACJ,IAEG,IAAIC,EAAQrB,EAAIsB,OAAOC,wBAAwBF,MAC3CG,EAASxB,EAAIsB,OAAOC,wBAAwBC,OAE5CC,EAAe,EACfC,EAAU,GACVC,EAAQ,EACRC,EAAY,GACZC,EAAS,EACTC,EAAc,EAEdC,EAAe,UACfC,EAAa,EAOXC,EAAWjC,EAAIkC,OAAO,KAAK/B,KAAK,KAAM,UACtCgC,EAAWnC,EAAIkC,OAAO,KAAK/B,KAAK,KAAM,UACtCiC,EAAIpC,EAAIkC,OAAO,KAOfG,EADM,GACc,KAE1BC,EAAY,GAQf,IACMC,EADYzC,SAASO,cAAc,WACVmC,aAM3BC,EAAWzC,EAAIsB,OAAOC,wBAAwBF,MAC9CqB,EAAY1C,EAAIsB,OAAOC,wBAAwBC,OAASe,EAK3CvC,EAAIkC,OAAO,QACnBA,OAAO,YACP/B,KAAK,KAAM,QACX+B,OAAO,QACP/B,KAAK,QAASsC,GACdtC,KAAK,SAAUuC,GAGpBP,EAAShC,KAAK,YAAa,cAG/BgC,EAAShC,KAAK,YAAa,cAIvB,IAAMwC,EAAO1C,GAAG0C,OACfC,YAAY,CAAC,GAAK,KAClBC,GAAG,QAkFR,SAAgBjC,GACZwB,EAAEjC,KAAK,YAAaS,EAAMkC,WAC1BR,EAAY1B,EAAMkC,UAAUC,EAChC,IA/DA,SAASC,EAAepC,GACpBA,EAAMqC,gBAEV,CAGA,SAASX,EAAYY,GAEjBjB,EAASkB,UAAU,KAAKC,SAUxB,IAPA,IAAMC,EAAoBhB,EAAca,EAGlCI,EAAajC,EAAQgC,EACrBE,EAAc/B,EAAS6B,EAGpBG,EAAI,EAAGA,GAAKF,EAAYE,IAAK,CAClC,IAAMC,EAAOD,EAAIH,EACjBpB,EAASC,OAAO,QACX/B,KAAK,KAAMsD,GACXtD,KAAK,KAAM,IACXA,KAAK,KAAMsD,GACXtD,KAAK,KAAM,GACXA,KAAK,SAAU,SAEhBqD,EAAI,GAAM,GACVvB,EAASC,OAAO,QACX/B,KAAK,IAAKsD,GACVtD,KAAK,IAAK,IACVuD,KAAKF,GACLrD,KAAK,YAAa,QAClBA,KAAK,cAAe,SAEjC,CAGA,IAAK,IAAIwD,EAAI,EAAGA,GAAKJ,EAAaI,IAAK,CACnC,IAAMC,EAAOD,EAAIN,EACjBpB,EAASC,OAAO,QACX/B,KAAK,KAAM,GACXA,KAAK,KAAMyD,GACXzD,KAAK,KAAM,IACXA,KAAK,KAAMyD,GACXzD,KAAK,SAAU,SAEhBwD,EAAI,GAAM,GACV1B,EAASC,OAAO,QACX/B,KAAK,IAAK,IACVA,KAAK,IAAKyD,GACVF,KAAKC,GACLxD,KAAK,YAAa,QAClBA,KAAK,cAAe,SACpBA,KAAK,qBAAsB,SAExC,CACJ,CA7EAH,EAAI6D,KAAKlB,GAcT7C,SAASW,iBAAiB,wBAAwBC,SAAQ,SAAAC,GACtDA,EAAMZ,iBAAiB,SAAS,WAXpC,IAA8B+D,EACtBC,MADsBD,EAWiCnD,GAVxBqD,qBACZD,EAAgBE,UAAUC,SAAS,6BACtDH,EAAgBX,SAChBU,EAAaK,MAAM9C,MAAQ,OAOkC,GACrE,IA0EGf,QAAQC,IAAI,kBAAmBc,GAC/Bf,QAAQC,IAAI,mBAAoBiB,GAGnC4C,MAAM,KAAM,CACRC,QAAS,4CACTC,UAAW,MACXC,WAAW,EACXC,UAAW,QACXC,OAAO,IAKTL,MAAM,aAAc,CACtBE,UAAW,QACXC,WAAW,EACXC,UAAW,QACXC,OAAO,IAGPL,MAAM,cAAe,CACjBM,OAAM,SAACC,GACHrE,QAAQC,IAAIoE,EAASN,QACzB,EACAC,UAAW,MACXC,WAAW,EACXC,UAAW,QACXC,OAAO,IAgBP,IAAMG,EAAsB,WACxB,IAAMnC,EAAWzC,EAAIsB,OAAOC,wBAAwBF,MAC9CqB,EAAY1C,EAAIsB,OAAOC,wBAAwBC,OACrDY,EAAEjC,KAAK,YAAa,aAAF0E,OAAepC,EAAW,EAAC,MAAAoC,OAAKnC,EAAY,EAAC,KACnE,EAEAkC,IAMJ9E,SAASU,eAAe,iBAAiBsE,UAAY,SAKrD,IAMMC,EAAUjF,SAASU,eAAe,WACpCwE,GAAa,EA4EjB,SAASnE,IAA4B,IAAhBoE,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACrBG,EAAevF,SAASO,cAAc,UAADwE,OAAWS,MACtD,GAAIL,EAAS,CAET,IAAIM,EAAQF,EAAahF,cAAc,mBAADwE,OAAoBI,EAAO,OAC7DM,GACAA,EAAMnC,QAEd,MAEIiC,EAAa5E,iBAAiB,mBAAmBC,SAAQ,SAAA6E,GACrDA,EAAMnC,QACV,GAER,CAKC,SAASoC,IACN1F,SAASO,cAAc,eAAeY,MAAQ,EAC9CnB,SAASO,cAAc,SAASY,MAAQ,GACxCnB,SAASO,cAAc,gBAAgBY,MAAQ,EAC/CnB,SAASO,cAAc,eAAeY,MAAQ,GAC9CnB,SAASO,cAAc,iBAAiBY,MAAQ,EAChDnB,SAASO,cAAc,gBAAgBY,MAAQ,CAClD,CAED,SAASwE,IACL3F,SAASO,cAAc,WAAWY,MAAQ,GAC1CnB,SAASO,cAAc,gBAAgBY,MAAQ,EAC/CnB,SAASO,cAAc,eAAeY,MAAQ,GAC9CnB,SAASO,cAAc,iBAAiBY,MAAQ,EAChDnB,SAASO,cAAc,gBAAgBY,MAAQ,CACnD,CAEA,SAASyE,IACL5F,SAASO,cAAc,kBAAkBY,MAAQ,GACjDnB,SAASO,cAAc,mBAAmBY,MAAQ,GAClDnB,SAASO,cAAc,gBAAgBY,MAAQ,EAC/CnB,SAASO,cAAc,eAAeY,MAAQ,GAC9CnB,SAASO,cAAc,iBAAiBY,MAAQ,EAChDnB,SAASO,cAAc,gBAAgBY,MAAQ,CACnD,CAEA,SAAS0E,IACL7F,SAASO,cAAc,gBAAgBY,MAAQ,IAC/CnB,SAASO,cAAc,gBAAgBY,MAAQ,EAC/CnB,SAASO,cAAc,eAAeY,MAAQ,GAC9CnB,SAASO,cAAc,iBAAiBY,MAAQ,EAChDnB,SAASO,cAAc,gBAAgBY,MAAQ,CACnD,CAkFA,SAASC,EAAoB+D,EAASlE,GAAqB,IAAX6E,EAAIV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD5E,QAAQC,IAAI,0BAA2B0E,EAAS,aAAclE,EAAU,QAAS6E,GAMjFC,IACIC,WAEAC,EAAad,EAAS,GAAFJ,OAAKe,EAAKzE,QAAO,OAAA0D,OAAMe,EAAKxE,WAAU,MAAAyD,OAAK9D,IAAY,GAI3EgF,EAAad,EAAS,iBAAFJ,OAAmB9D,IAAY,EAE3D,CAGA,SAASgF,EAAad,EAASe,EAAcF,GAA6B,IAAjBG,EAAQf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAC1DgB,EAAW,SAAWZ,IACtBa,EAAYrG,SAASO,cAAc,IAADwE,OAAKqB,IAIvCE,EADetG,SAASU,eAAeyE,GACPoB,aAAa,cAI7CC,EAAgBH,EAAU9F,cAAc,mBAADwE,OAAoBI,EAAO,OAMxE,GALIqB,GACAH,EAAUI,YAAYD,GAItBR,EAAY,CACZ,IAAMU,EAAa,GAAH3B,OAAMuB,EAAgB,gBAAAvB,OAAemB,GAE/CT,EAAQzF,SAAS2G,cAAc,OACrClB,EAAMmB,aAAa,aAAczB,GACjCM,EAAMoB,YAAcH,EACpBL,EAAUS,YAAYrB,EAC1B,CAGA,GAAIU,EAAU,CACV,IAAMY,EAAY/G,SAAS2G,cAAc,OACzCI,EAAUF,YAAcV,EACxBE,EAAUS,YAAYC,EAC1B,CACJ,CAIA,SAASC,EAAYC,EAAOC,EAAQC,GAEhCF,EAAQG,KAAKC,MAAMJ,GAEnB,IAAMK,EAAQ,EAAIF,KAAKG,GAAKN,EACtBO,EAAY,EAAIJ,KAAKG,GAAKL,EAC1BO,EAAYD,EAAYzF,EAGxB2F,GAFoBN,KAAKG,GAEXI,MAAMC,KAAK,CAAEvC,OAAQ4B,IAAS,SAACY,EAAGnE,GAClD,MAAO,CAAC0D,KAAKU,IAAIpE,EAAI4D,GAASJ,EAAQE,KAAKW,IAAIrE,EAAI4D,GAASJ,EAChE,KAEA5E,EAAEF,OAAO,QACJ/B,KAAK,IAAKF,GAAG6H,MAAH7H,CAAUuH,GAAe,KACnCrH,KAAK,SAAU,SACfA,KAAK,OAAQ,QAElB,IAAK,IAAIqD,EAAI,EAAGA,EAAI3B,EAAQ2B,IAGxB,IAFA,IAAMuE,EAAWvE,EAAI+D,EAAYN,EAAQK,EACrCU,EAAkB,EACbrE,EAAI,EAAGA,EAAIoD,EAAOpD,IAAK,CAC5B,IAAMsE,EAAQT,EAAY7D,GACpBuE,EAAMV,GAAa7D,EAAI,GAAKoD,GAC5BoB,EAAgBjB,KAAKkB,KAAKlB,KAAAmB,IAACH,EAAI,GAAKD,EAAM,GAAK,GAACf,KAAAmB,IAAIH,EAAI,GAAKD,EAAM,GAAK,IAC9E,GAAID,EAAkBG,EAAgBJ,EAAU,CAC5C,IAAMO,GAASP,EAAWC,GAAmBG,EACvCI,EAASN,EAAM,IAAMC,EAAI,GAAKD,EAAM,IAAMK,EAC1CE,EAASP,EAAM,IAAMC,EAAI,GAAKD,EAAM,IAAMK,EAChDlG,EAAEF,OAAO,UACJ/B,KAAK,KAAMoI,GACXpI,KAAK,KAAMqI,GACXrI,KAAK,IAAK2B,GACV3B,KAAK,OAAQ,SAClB,KACJ,CACA6H,GAAmBG,CACvB,CAIJM,GACJ,CAKA,SAASC,IACLpI,QAAQC,IAAI,8BACZ6B,EAAEe,UAAU,KAAKC,SAEjB,IAAMuF,GAAc7I,SAASU,eAAe,UAAUS,OAAS,GAC3D2H,GAAa9I,SAASU,eAAe,cAAcS,OAAS,IAG5D2H,GAAa,EACbA,EAAY,GACLA,GAAa,MACpBA,EAAY,OAShB,IANA,IAAMC,EAAsBD,EAAY1B,KAAKG,GAAK,KAAQxF,EAAS,GAC7DiH,EAAiBD,EAAqB,EAGtCE,IADejJ,SAASU,eAAe,mBAAmBS,OAAS,IAC/BiG,KAAKG,GAAK,KAE3C7D,EAAI,EAAGA,EAAI7B,EAAO6B,IAAK,CAC5B,IAAMwF,EAAgBL,EAAc/G,EAAY4B,EAC1CyF,EAAuBzF,EAAI,EAAKsF,EAGhCI,EAAShC,KAAKU,IAAImB,GAAsBC,EACxCG,EAASjC,KAAKW,IAAIkB,GAAsBC,EACxCI,EAAOlC,KAAKU,IAAKgB,EAAY1B,KAAKG,GAAK,IAAO0B,GAAsBC,EACpEK,EAAOnC,KAAKW,IAAKe,EAAY1B,KAAKG,GAAK,IAAO0B,GAAsBC,EACpEM,EAAeV,GAAa,IAAM,EAAI,EAEtCW,EAAW,KAAH1E,OAAQqE,EAAM,KAAArE,OAAIsE,EAAM,OAAAtE,OAAMmE,EAAa,KAAAnE,OAAImE,EAAa,OAAAnE,OAAMyE,EAAY,OAAAzE,OAAMuE,EAAI,KAAAvE,OAAIwE,GAC1G/I,QAAQC,IAAI,UAAW2I,EAAQ,UAAWC,EAAQ,iBAAkBH,EAAe,gBAAiBM,EAAc,QAASF,EAAM,QAASC,GAE1IjH,EAAEF,OAAO,QACJ/B,KAAK,IAAKoJ,GACVpJ,KAAK,OAAQ,QACbA,KAAK,SAAU,SACpBG,QAAQC,IAAI,aAAcgJ,GAE1B,IAAK,IAAI5F,EAAI,EAAGA,EAAI9B,EAAQ8B,IAAK,CAC7B,IAAMyD,EAAQzD,EAAIkF,EAAqBI,EAAsBF,EACvDR,EAASrB,KAAKU,IAAIR,GAAS4B,EAC3BR,EAAStB,KAAKW,IAAIT,GAAS4B,EAEjC5G,EAAEF,OAAO,UACJ/B,KAAK,KAAMoI,GACXpI,KAAK,KAAMqI,GACXrI,KAAK,IAAK2B,GACV3B,KAAK,OAAQ,QACtB,CACAsI,GACJ,CACJ,CA8CA,SAASe,IACLlJ,QAAQC,IAAI,+BACZ6B,EAAEe,UAAU,KAAKC,SAGjB,IAAMqG,GAAe3J,SAASU,eAAe,uBAAuBS,OAAS,EACzEyI,GAAU5J,SAASU,eAAe,kBAAkBS,OAAS,IAC3D0I,GAAM7J,SAASU,eAAe,iBAAiBS,OAAS,GACxD2I,GAAM9J,SAASU,eAAe,kBAAkBS,OAAS,GAG3DyI,GAAU,EACVA,EAAS,GACFA,GAAU,MACjBA,EAAS,OAOb,IAHA,IAAMX,EAAqBU,GAAevC,KAAKG,GAAK,KAG3C7D,EAAI,EAAGA,EAAI7B,EAAO6B,IAAK,CAC5B,IAAMqG,EAAYF,EAAM/H,EAAY4B,EAC9BsG,EAAYF,EAAMhI,EAAY4B,EAC9BuG,EAAcvG,EAAI,GAAM,EAAK,EAAK0D,KAAKG,GAAKxF,EAG5CqH,EAASW,EAAY3C,KAAKU,IAAImB,GAC9BI,EAASW,EAAY5C,KAAKW,IAAIkB,GAC9BK,EAAOS,EAAY3C,KAAKU,IAAImB,EAAqBW,EAASxC,KAAKG,GAAK,KACpEgC,EAAOS,EAAY5C,KAAKW,IAAIkB,EAAqBW,EAASxC,KAAKG,GAAK,KACpEiC,EAAeI,GAAU,IAAM,EAAI,EAEnCH,EAAW,KAAH1E,OAAQqE,EAAM,KAAArE,OAAIsE,EAAM,OAAAtE,OAAMgF,EAAS,KAAAhF,OAAIiF,EAAS,OAAAjF,OAAMyE,EAAY,OAAAzE,OAAMuE,EAAI,KAAAvE,OAAIwE,GAQlG,GAPAjH,EAAEF,OAAO,QACJ/B,KAAK,IAAKoJ,GACVpJ,KAAK,OAAQ,QACbA,KAAK,SAAU,SACpBG,QAAQC,IAAI,aAAcgJ,GAGtB1H,EAAS,EAET,IADA,IAAMmI,EAAiBN,EAASxC,KAAKG,GAAK,KAAQxF,EAAS,GAClD8B,EAAI,EAAGA,EAAI9B,EAAQ8B,IAAK,CAC7B,IAAMyD,EAAQzD,EAAIqG,EAAgBD,EAAahB,EACzCR,EAASsB,EAAY3C,KAAKU,IAAIR,GAC9BoB,EAASsB,EAAY5C,KAAKW,IAAIT,GAEpChF,EAAEF,OAAO,UACJ/B,KAAK,KAAMoI,GACXpI,KAAK,KAAMqI,GACXrI,KAAK,IAAK2B,GACV3B,KAAK,OAAQ,QACtB,CAER,CACAsI,GACJ,CA4DA,SAASwB,KAnfT,WACI,IAAMC,EAAepK,SAASO,cAAc,oCAC5CC,QAAQC,IAAI,iBAAkB2J,EAAapJ,IAE3C,IAAId,EAAMC,GAAGC,OAAOgK,GAAchK,OAAO,OACzC,GAAIF,EAAIE,OAAO,KAAKiK,QAAS,CACzB,IAAMC,EAAyBtK,SAASO,cAAc,kBAChDgK,EAAUD,EAAuBE,YAAc,EAC/CC,EAAUH,EAAuBI,aAAe,EACtDxK,EAAIkC,OAAO,KAAK/B,KAAK,YAAa,aAAF0E,OAAewF,EAAO,KAAAxF,OAAI0F,EAAO,KACrE,CACAvK,EAAIE,OAAO,KAAKiD,UAAU,KAAKC,SAE3BpD,EAAIE,OAAO,eAAeiK,SAC1BnK,EAAIkC,OAAO,QACN/B,KAAK,QAAS,UACdA,KAAK,IAAK,IACVA,KAAK,IAAKH,EAAIsB,OAAOC,wBAAwBC,OAAS,IACtDrB,KAAK,YAAa,QAGpBH,EAAIE,OAAO,IACtB,CA8dsBuK,GAGlBtI,EAASgB,UAAU,KAAKC,SAGxB,IAAM8F,GAAU,GACVC,GAAU,GAGV3H,GAAU1B,SAASU,eAAe,eAAeS,MACvDX,QAAQC,IAAI,2BAA4BiB,GAExC,IAAMG,GAAS7B,SAASU,eAAe,eAAeS,MAChDW,GAAa9B,SAASU,eAAe,cAAcS,MACnDY,GAAU/B,SAASU,eAAe,gBAAgBS,MAClDe,GAAclC,SAASU,eAAe,eAAeS,MAC3DX,QAAQC,IAAI,+BAAgCqB,GAC5CtB,QAAQC,IAAI,2BAA4BsB,GACxCvB,QAAQC,IAAI,gCAAiCyB,GAG7CI,EAAEF,OAAO,QACR/B,KAAK,KAAM+I,GACP/I,KAAK,KAAMgJ,GACXhJ,KAAK,KAAM+I,GACX/I,KAAK,KAAMgJ,EAAS3H,GACpBrB,KAAK,SAAU,SASxB,SAA2B+I,EAAQC,EAAQ3H,EAAQG,EAAOC,GACtD,IAAI,IAAI4B,EAAI,EAAGA,GAAK7B,EAAO6B,IACvBpB,EAAEF,OAAO,QACJ/B,KAAK,KAAM+I,EAAS1F,EAAI5B,GACxBzB,KAAK,KAAMgJ,GACXhJ,KAAK,KAAM+I,EAAS1F,EAAI5B,GACxBzB,KAAK,KAAMgJ,EAAS3H,GACpBrB,KAAK,SAAU,SAEhBG,QAAQC,IAAI,mBAAoB2I,EAAQC,GACxC7I,QAAQC,IAAI,iBAAkB2I,EAAQC,EAAS3H,GAG/ClB,QAAQC,IAAI,iBAADsE,OAAkBrB,EAAC,YAAAqB,OAAWqE,EAAS1F,EAAI5B,EAAS,MAAAiD,OAAKsE,IACpE7I,QAAQC,IAAI,iBAADsE,OAAkBrB,EAAC,UAAAqB,OAASqE,EAAS1F,EAAI5B,EAAS,MAAAiD,OAAKsE,EAAS3H,IAGnFiH,GACJ,CAxBIiC,CAAkBxB,EAAQC,EAAQ3H,EAAQG,EAAOC,GA0BrD,SAAoBsH,EAAQC,EAAQ3H,EAAQG,EAAOC,EAAWC,EAAQG,GAIlE,IAHA,IAAM2I,EAAUnJ,GAAUK,EAAS,GAC7B+I,EAAkBhJ,EAEhB+B,EAAI,EAAGA,GAAKhC,EAAOgC,IAIvB,IAHA,IAAMkH,EAAYlH,EAAI,GAAM,EACtBmH,EAAYD,EAAYhJ,EAAS,EAAIA,EAEnC2B,EAAI,EAAGA,GAAKsH,EAAWtH,IAAK,CAChC,IAAIuH,EAMAA,EALCF,GAKqBrH,EAAI,IAAOmH,EAtC1BxB,GAmCc3F,EAAImH,EAnClBxB,GAyCX/G,EAAEF,OAAO,QACJ/B,KAAK,IAAcwD,EAAI/B,EA1CzBsH,GA0CqC0B,EAAkB,GACrDzK,KAAK,IAAK4K,EAAY/I,EAAa,GACnC7B,KAAK,QAASyK,GACdzK,KAAK,SAAU6B,GACf7B,KAAK,OAAQ,SACbA,KAAK,SAAU,QAIpBG,QAAQC,IAAI,SAADsE,OAAUrB,EAAC,aAAAqB,OAAYlB,EAAC,UAAAkB,OAAkBlB,EAAI/B,EAnDtDsH,GAmD+D,UAAArE,OAASkG,GAE/E,CAER,CAvDIC,CAAW9B,EAAQC,EAAQ3H,EAAQG,EAAOC,EAAWC,EAAQG,EACjE,CA6GA,SAASsD,IAEL,OADqBxF,SAASO,cAAc,oCACxBS,EACxB,CAGA,SAASmK,EAAgBrK,GACrB,IAAMsK,EAAOtK,EAAMI,OACbmK,EAAMD,EAAKE,QAAQ,MACzB9K,QAAQC,IAAI,qBAAsB4K,GAElCrL,SAASW,iBAAiB,uCAAuCC,SAAQ,SAAA2K,GACjEA,IAAMF,IACNE,EAAEpH,UAAUqH,IAAI,gBAChBhL,QAAQC,IAAI,0BAA2B8K,GAE/C,IAEAF,EAAIlH,UAAUqH,IAAI,cAClBhL,QAAQC,IAAI,wBAAyB4K,GACrCD,EAAKjH,UAAUqH,IAAI,oBAGnB1K,EAAM2K,aAAaC,QAAQ,aAAc5K,EAAMI,OAAO2F,aACtD/F,EAAM2K,aAAaC,QAAQ,iBAAkBL,EAAI9E,aAAa,oBAC9DzF,EAAM2K,aAAaC,QAAQ,oBAAqB5K,EAAMI,OAAOqF,aAAa,sBAC9E,CArrBAtB,EAAQhF,iBAAiB,aAAa,SAAS0L,GAC7CA,EAAExI,iBACF+B,GAAa,CACf,IAGAlF,SAASC,iBAAiB,aAAa,SAAS0L,GAC9C,GAAKzG,EAAL,CACA,IAAI0G,EAAc5L,SAAS6L,KAAKC,aAAeH,EAAEI,QAAU/L,SAAS6L,KAAKG,YAErEC,EAAWC,OAAOC,WADP,IAEXP,EAFW,KAEeA,EAAcK,IAC1CjM,SAASO,cAAc,kBAAkB8D,MAAM9C,MAAQ,GAAHwD,OAAM6G,EAAW,MACrE5L,SAASO,cAAc,iBAAiB8D,MAAM9C,MAAQ,eAAHwD,OAAkB6G,EAAW,OAN3D,CAQzB,IAGA5L,SAASC,iBAAiB,WAAW,SAAS0L,GAC5CzG,GAAa,CACf,IAyHAlF,SAASO,cAAc,mBAAmBN,iBAAiB,UAAU,SAAS0L,GAK1E,OAJAnL,QAAQC,IAAI,oBAAqBkL,EAAEzK,OAAOC,OAC1Cc,EAAe0J,EAAEzK,OAAOC,OAIpB,IAAK,UACDuE,IACAsB,EAAYrF,EAAcC,GAC1B,MACJ,IAAK,SACD+D,IACAiD,IACA,MACJ,IAAK,UACDhD,IACA8D,IACA,MACJ,IAAK,OACD7D,IACAsE,IACA,MACJ,QACI3J,QAAQ4L,MAAM,yBAADrH,OAA0B9C,IApC5BjC,SAASW,iBAAiB,eAClCC,SAAQ,SAAAC,GACfA,EAAMwD,MAAMgI,YAAc,GAC1BxL,EAAMwD,MAAMiI,gBAAkB,GAC9BzL,EAAMsD,UAAUb,OAAO,cACvBzC,EAAMsD,UAAUqH,IAAI,eACxB,IACAhL,QAAQC,IAAI,0BAmChB,IAIAT,SAASU,eAAe,gBAAgBT,iBAAiB,SAAS,WAE1DyF,IACAC,IACAC,IACAC,IAGJ7F,SAASU,eAAe,iBAAiBS,MAAQ,GACjDnB,SAASU,eAAe,kBAAkBS,MAAQ,GAIlDmB,EAAEe,UAAU,KAAKC,SACjBvC,IAIuBf,SAASW,iBAAiB,eAClCC,SAAQ,SAAAC,GACfA,EAAMwD,MAAMgI,YAAc,GAC1BxL,EAAMwD,MAAMiI,gBAAkB,GAC9BzL,EAAMsD,UAAUb,OAAO,cACvBzC,EAAMsD,UAAUqH,IAAI,eACxB,IACAhL,QAAQC,IAAI,0BAChB,IAqKJT,SAASO,cAAc,WAAWN,iBAAiB,SAAS,SAAS0L,GACjE,IAAMY,EAAYZ,EAAEzK,OAAOC,MAC3BC,EAAoB,SAAUmL,EAClC,IAIAvM,SAASO,cAAc,eAAeN,iBAAiB,SAAS,SAAS0L,GACrD3L,SAASU,eAAe,sBAChCmG,YAAc8E,EAAEzK,OAAOC,MAC/ByH,GACJ,IAEA5I,SAASO,cAAc,oBAAoBN,iBAAiB,SAAS,SAAS0L,GAC1D3L,SAASU,eAAe,2BAChCmG,YAAc8E,EAAEzK,OAAOC,MAC/ByH,GACJ,IAEA5I,SAASO,cAAc,eAAeN,iBAAiB,SAAS,SAAS0L,GACrE7J,GAAa6J,EAAEzK,OAAOC,MACtByH,GACJ,IAEA5I,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtEzJ,GAAcyJ,EAAEzK,OAAOC,MACvByH,GACJ,IAEA5I,SAASO,cAAc,iBAAiBN,iBAAiB,SAAS,SAAS0L,GACvE5J,GAAU4J,EAAEzK,OAAOC,MACnByH,GACJ,IAEA5I,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtE9J,GAAS8J,EAAEzK,OAAOC,MAClByH,GACJ,IAkEA5I,SAASO,cAAc,kBAAkBN,iBAAiB,SAAS,SAAS0L,GACxEjC,GACJ,IAEA1J,SAASO,cAAc,mBAAmBN,iBAAiB,SAAS,SAAS0L,GACzEjC,GACJ,IAEA1J,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACjD,YAAjB1J,IACAJ,GAAS8J,EAAEzK,OAAOC,MAClBuI,IAER,IAEA1J,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACjD,YAAjB1J,IACAC,GAAcyJ,EAAEzK,OAAOC,MACvBuI,IAER,IAEA1J,SAASO,cAAc,iBAAiBN,iBAAiB,SAAS,SAAS0L,GAClD,YAAjB1J,IACAC,GAAcyJ,EAAEzK,OAAOC,MACvBuI,IAER,IAGA1J,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACjD,YAAjB1J,IACAJ,GAAS8J,EAAEzK,OAAOC,MAClBuI,IAER,IAGA1J,SAASO,cAAc,wBAAwBN,iBAAiB,SAAS,SAAS0L,GAC9D3L,SAASU,eAAe,+BAChCmG,YAAc8E,EAAEzK,OAAOC,MAC/BuI,GACJ,IAEA1J,SAASO,cAAc,mBAAmBN,iBAAiB,SAAS,SAAS0L,GACzD3L,SAASU,eAAe,0BAChCmG,YAAc8E,EAAEzK,OAAOC,MAC/BuI,GACJ,IAuGA1J,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GAEjD,SAAjB1J,GACAkI,GAER,IAGAnK,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtEnL,QAAQC,IAAI,uBACS,SAAjBwB,GACAkI,GAGR,IAKAnK,SAASO,cAAc,eAAeN,iBAAiB,SAAS,SAAS0L,GACrEnL,QAAQC,IAAI,sBACS,SAAjBwB,IACDkI,IACC3J,QAAQC,IAAI,cAAeqB,GAC3B6G,IAER,IAGA3I,SAASO,cAAc,iBAAiBN,iBAAiB,SAAS,SAAS0L,GACvEnL,QAAQC,IAAI,wBACS,SAAjBwB,GACAkI,GAER,IAGAnK,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtEnL,QAAQC,IAAI,uBACU,SAAjBwB,IACDkI,IACA3J,QAAQC,IAAI,eAAgByB,GAGpC,IA+BAlC,SAASW,iBAAiB,wBAAwBC,SAAQ,SAAAC,GACtDA,EAAMZ,iBAAiB,aAAa,SAASa,GACzC,GAAID,EAAMsD,UAAUC,SAAS,gBAELoI,QAAQ,yEAKxB,OADA1L,EAAMqC,kBACC,CAGnB,GACJ,IAQA,IAAIsJ,EAAwB,CAAC,EAI7B,SAASC,EAAW5L,GAChBA,EAAMqC,iBAEN,IAAMlC,EAAWH,EAAM2K,aAAakB,QAAQ,cACtCC,EAAe9L,EAAM2K,aAAakB,QAAQ,qBAC1C3I,EAAelD,EAAMI,OAAOoK,QAAQ,SAE1C,GAAItH,EAAc,CACdA,EAAa7C,MAAQF,EACrB+C,EAAaG,UAAUqH,IAAI,cAG3B,IAAIqB,EAAkB7I,EAAaE,mBAC9B2I,GAAoBA,EAAgB1I,UAAUC,SAAS,8BACxDyI,EAAkB7M,SAAS2G,cAAc,SACzBmG,UAAY,0BAC5B9I,EAAa+I,WAAWC,aAAaH,EAAiB7I,EAAaiJ,cAGvEJ,EAAgBhG,YAAc+F,EAC9B5I,EAAaK,MAAM9C,MAAQ,eAAHwD,OAAkB8H,EAAgBf,YAAW,OAGrEoB,EAA0BL,EAAiB7I,GAE3CyI,EAAsBG,GAAgB,CAAE5L,GAAIgD,EAAahD,GAAImM,UAAW,KAAMC,OAAQ,MACtFhM,EAAoB4C,EAAahD,GAAIC,EAAU,CAAEK,WAAYsL,IAG7DpM,QAAQC,IAAI,sBAAuBuD,EAAa7C,OAGhDkM,IACAC,IAGA9M,QAAQC,IAAI,iCAChB,CACJ,CAYA,SAAS8M,EAAczM,GACnBN,QAAQC,IAAI,mBACZK,EAAMI,OAAOiD,UAAUb,OAAO,mBAElC,CA4BA,SAAS4J,EAA0BM,EAAexJ,GAC9CwJ,EAAcvN,iBAAiB,SAAS,SAASa,GAEd,iBAA3BA,EAAMI,OAAO4L,WAKzB,SAAgC9I,EAAc4I,GAAc,IAAAa,EAExD,GADAjN,QAAQC,IAAI,qCAADsE,OAAsC6H,IACT,QAApCa,EAAChB,EAAsBG,UAAa,IAAAa,GAAnCA,EAAqCN,UAOnC,CACH3M,QAAQC,IAAI,4CAADsE,OAA6C6H,IACxD,IAAMc,EAAS1J,EAAa+I,WAC5BvM,QAAQC,IAAI,eAAgBiN,GAC5BlN,QAAQC,IAAI,2BAA4BiN,EAAOC,UAC/C,IAAMC,EAAcF,EAAOnN,cAAc,iBACrCqN,GACApN,QAAQC,IAAI,2BAADsE,OAA4B6H,EAAY,oBACnDgB,EAAYC,SAEZrN,QAAQC,IAAI,+BAADsE,OAAgC6H,EAAY,sBAE/D,KAnBqD,CAEjD,IAAMkB,EAAYC,OAAO,qDAADhJ,OAAsD6H,EAAY,MAAM,cAChG,GAAIkB,EAAW,CACX,IAAgDE,EAAAC,EAApBH,EAAUI,MAAM,KAAI,GAAzCf,EAASa,EAAA,GAAEZ,EAAMY,EAAA,IAmBpC,SAA+BhK,EAAc4I,EAAcO,EAAWC,GAElEX,EAAsBG,GAAgB,CAClC5L,GAAIgD,EAAahD,GACjBmM,UAAWA,EACXC,OAAQA,EACRe,cAAeC,WAAWpK,EAAa7C,QAK3C,IAAMF,EAA0B,aAAdkM,EAA4BV,EAAsBG,GAAcuB,cAAgBf,EAASX,EAAsBG,GAAcuB,cAAgBf,EAC/JpJ,EAAa7C,MAAQF,EAGrBG,EAAoB4C,EAAahD,GAAIC,EAAU,CAAEK,WAAYsL,IAMjE,SAA6B5I,EAAc4I,EAAcO,EAAWC,GAChE5M,QAAQC,IAAI,6BAA8B,CAAEmM,aAAAA,EAAcO,UAAAA,EAAWC,OAAAA,IAGrE,IAAIP,EAAkB7I,EAAaE,mBACnC1D,QAAQC,IAAI,4BAA6BoM,GAEpCA,GAAoBA,EAAgB1I,UAAUC,SAAS,6BACxD5D,QAAQC,IAAI,iCACZoM,EAAkB7M,SAAS2G,cAAc,QACzBmG,UAAY,0BAC5B9I,EAAa+I,WAAWC,aAAaH,EAAiB7I,EAAaiJ,cAIvE,IAAIW,EAAcf,EAAgBtM,cAAc,iBAChDC,QAAQC,IAAI,6BAA8BmN,GAErCA,GAkBDpN,QAAQC,IAAI,uCACZmN,EAAYzM,MAAQiM,IAlBpB5M,QAAQC,IAAI,6BACZmN,EAAc5N,SAAS2G,cAAc,UACzBmG,UAAY,eACxBc,EAAYS,KAAO,OACnBT,EAAYzM,MAAQiM,EACpBQ,EAAY3N,iBAAiB,UAAU,SAACa,GACpCN,QAAQC,IAAI,wBAAyBK,EAAMI,OAAOC,OAClD,IAAMmN,EAAYF,WAAWtN,EAAMI,OAAOC,OACrCoN,MAAMD,GAIP9N,QAAQC,IAAI,4CAHZD,QAAQC,IAAI,sCAAuC6N,GAyBnE,SAAyBtK,EAAc4I,EAAcO,EAAWmB,GAAW,IAAAE,EACjEL,GAAmD,QAAnCK,EAAA/B,EAAsBG,UAAa,IAAA4B,OAAA,EAAnCA,EAAqCL,gBAAiBC,WAAWpK,EAAa7C,OAC9FF,EAA0B,aAAdkM,EAA4BgB,EAAgBG,EAAYH,EAAgBG,EAC1FtK,EAAa7C,MAAQF,EACrBwL,EAAsBG,GAAgB,CAAE5L,GAAIgD,EAAahD,GAAImM,UAAAA,EAAWC,OAAQkB,EAAWH,cAAAA,GAC3F/M,EAAoB4C,EAAahD,GAAIC,EAAU,CAAEK,WAAYsL,IAG7D,IAAMC,EAAkB7I,EAAaE,mBACjC2I,GAAmBA,EAAgB1I,UAAUC,SAAS,6BACtDyI,EAAgBhG,YAAc,GAAH9B,OAAM6H,EAAY,KAAA7H,OAAkB,aAAdoI,EAA2B,IAAM,KAAGpI,OAAGuJ,GAEhG,CApCgBG,CAAgBzK,EAAc4I,EAAcO,EAAWmB,GAI/D,IACAzB,EAAgB/F,YAAY8G,IAOhC,IAAIc,EAAgB7B,EAAgB8B,WAC/BD,GAAiBA,EAAcE,WAAaC,KAAKC,YAClDtO,QAAQC,IAAI,mCACZiO,EAAgB1O,SAAS+O,eAAe,IACxClC,EAAgBG,aAAa0B,EAAed,IAEhDpN,QAAQC,IAAI,sCACZiO,EAAcM,UAAY,GAAHjK,OAAM6H,EAAY,KAAA7H,OAAkB,aAAdoI,EAA2B,IAAM,IAClF,CAtDI8B,CAAoBjL,EAAc4I,EAAcO,EAAWC,GAC3DC,IACAC,GACJ,CArCY4B,CAAsBlL,EAAc4I,EAAcO,EAAWiB,WAAWhB,GAC5E,CACJ,CAaJ,CA1BY+B,CAAuBnL,EAAcwJ,EAAc3G,YAE3D,GACJ,CAqHA,SAASzF,EAAoB+D,EAASlE,GAAqB,IAAX6E,EAAIV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,OAAOD,GACH,IAAK,aACDxD,GAAgBV,EAChB,MACJ,IAAK,OACDW,GAAWX,EACX,MACJ,IAAK,cACDY,GAASZ,EACT,MACJ,IAAK,aACDa,GAAab,EACb,MACJ,IAAK,eACDc,GAAUd,EACV,MACJ,IAAK,cACDe,GAAef,EAAW,EAC1B,MACI,IAAK,gBAkBT,IAAK,gBAGDmO,cAAgBnO,EACK,YAAjBgB,GACAyH,IAEJ,MAhBR,IAAK,iBAkBD,IAAK,iBAGD2F,eAAiBpO,EACI,YAAjBgB,GACAyH,IAEJ,MACA,IAAK,cAGD4F,YAAcrO,EACO,SAAjBgB,GACAkI,IAEJ,MACZ,IAAK,SAEDvB,IACA,MACJ,QAEI,YADApI,QAAQ4L,MAAM,uBAADrH,OAAwBI,IAG7CY,IACAE,EAAad,EAAS,GAAFJ,OAAKe,EAAKzE,QAAO,OAAA0D,OAAMe,EAAKxE,WAAU,MAAAyD,OAAK9D,IAAY,EAC/E,CAKI,SAASiC,EAAeyI,GACpBA,EAAExI,gBACN,CA2MA,SAAS4C,IAML,GAJAzD,EAAEe,UAAU,KAAKC,SACjB9C,QAAQC,IAAI,6BAA8BwB,GAGrB,YAAjBA,EACA,IAAK,IAAIyB,EAAI,EAAGA,EAAI7B,EAAO6B,IACvBsD,EAAYrF,EAAcC,EAAWE,EAAY4B,EAAKA,EAAI,GAAM,GAAK,EAAI3B,SAErD,WAAjBE,GACP2G,IAGiB,YAAjB3G,EACAyH,IACwB,SAAjBzH,GACPkI,IAGJxB,GACJ,CAwBA,SAASA,IAELnI,QAAQC,IAAI,6CAEZ,IAAM8O,EAAOjN,EAAEd,OAAOgO,UAGtBhP,QAAQC,IAAI,gBAAiB8O,GAE7B,IAAME,GAAaF,EAAKhO,MAAQgB,GAAamN,QAAQ,GAC/CC,GAAcJ,EAAK7N,OAASa,GAAamN,QAAQ,IA4C3D,SAA6BE,GACrB,IAAMC,EAAS7P,SAASU,eAAe,sBACjCoP,EAAQ9P,SAASU,eAAe,sBAEtC,GAAImP,EAAQ,CACR,IACM1O,EAASyO,EADGxB,WAAWyB,EAAOtJ,aAAa,QACX,IACtCsJ,EAAO1O,MAAQA,EAGf,IAAM4O,EAAe3I,KAAKC,MAAMlG,GAGhC2O,EAAMjJ,YAAckJ,CACxB,MACIvP,QAAQ4L,MAAM,oCAUtB,WACI,IAAM4D,EAAiBhQ,SAASO,cAAc,oBAG9CyP,EAAerP,iBAAiB,YAAYC,SAAQ,SAAAqP,GAAO,OAAIA,EAAQ3M,QAAQ,IAG3ExB,EAAY,KACZtB,QAAQC,IAAI,8BAEZyP,EAAWF,EAAgB,iGAI3B9N,EAAa,IACbgO,EAAWF,EAAgB,kEAG3BjO,EAAS,IACTmO,EAAWF,EAAgB,6DAGnC,CA5BIG,EACR,CA3DAC,CAHoBhJ,KAAKiJ,IAAIZ,EAAWE,IAKpC,IAAIxJ,EAAW,gBAAHpB,OAAmB0K,EAAS,iBAAA1K,OAAgB4K,EAAU,OAClEnP,QAAQC,IAAI,aAAc0F,GAG1B7F,EAAqBuG,YAAcV,EAEnC,IAAM6J,EAAiB1P,EAAqBgQ,cAG5CN,EAAerP,iBAAiB,YAAYC,SAAQ,SAAAqP,GAAO,OAAIA,EAAQ3M,QAAQ,KAGhFmM,EAAY,IAAME,EAAa,KAClCO,EAAWF,EAAgB,6HAI3BlO,EAAY,IACZoO,EAAWF,EAAgB,gGAI3B9N,EAAa,IACbgO,EAAWF,EAAgB,kEAO3BjO,EAAS,IAAMG,EAAa,IAC5BgO,EAAWF,EAAgB,8DAyDvB1N,EAAEF,OAAO,QACL/B,KAAK,IAAKkP,EAAKgB,GACflQ,KAAK,IAAKkP,EAAKiB,GACfnQ,KAAK,QAASkP,EAAKhO,OACnBlB,KAAK,SAAUkP,EAAK7N,QACpBrB,KAAK,SAAU,QACfA,KAAK,eAAgB,KACrBA,KAAK,OAAQ,OACrB,CAEA,SAAS6P,EAAWI,EAAeG,GAE/B,IAAMC,EAAYD,EAAYE,QAAQ,gBAAiB,KAAKC,cAGxDC,EAAiBP,EAAc/P,cAAc,kBAADwE,OAAmB2L,EAAS,OAEvEG,KACDA,EAAiB7Q,SAAS2G,cAAc,SACzBE,YAAc4J,EAC7BI,EAAexM,MAAMyM,MAAQ,MAC7BD,EAAejK,aAAa,eAAgB8J,GAC5CG,EAAe1M,UAAUqH,IAAI,WAE7B8E,EAAcxJ,YAAY+J,GAElC,CAkLA,SAASE,IACL,IAAMC,EAAahR,SAASW,iBAAiB,oCACpB,IAAtBqQ,EAAW3L,OAKd2L,EAAWpQ,SAAQ,SAAAqQ,GACfA,EAAOhR,iBAAiB,SAAS,WAC7BO,QAAQC,IAAI,uBAADsE,OAAwBkM,EAAOpK,cA1EtD,SAA8BoK,GAEVjR,SAASW,iBAAiB,uCAClCC,SAAQ,SAAAyK,GACZA,EAAIlH,UAAUb,OAAO,cACrB+H,EAAIlH,UAAUqH,IAAI,eACtB,IAEA,IAAM0F,EAAaD,EAAOX,cAC1BY,EAAW/M,UAAUqH,IAAI,cACzB0F,EAAW/M,UAAUb,OAAO,gBAG5B,IAAM6N,EA1CV,SAAoBC,GAChB,IAAMD,EAAU,CAAC,EACXE,EAAUrR,SAASW,iBAAiB,qBAM1C,OALAyQ,EAAWzQ,iBAAiB,MAAMC,SAAQ,SAACwK,EAAMkG,GAE7C,IAAM1E,EAAeyE,EAAQC,EAAQ,GAAGzK,YACxCsK,EAAQvE,GAAgBxB,EAAKvE,WACjC,IACOsK,CACX,CAiCoBI,CAAWL,GAC3BM,OAAOC,QAAQN,GAASvQ,SAAQ,SAAA8Q,GAA2B,IAAAC,EAAA1D,EAAAyD,EAAA,GAAzB9E,EAAY+E,EAAA,GAAExQ,EAAKwQ,EAAA,GAC3CC,EAAcnF,EAAsBG,GAC1C,GAAIgF,EAAa,CACb,IAAM5N,EAAehE,SAASU,eAAekR,EAAY5Q,IAAM4Q,GAC/D,GAAI5N,EAAc,CACd,IAAI6N,EAAazD,WAAWjN,GAG5B,GAAIyQ,EAAYzE,UAAW,CACvB,IAAM2E,EAASF,EAAYzE,UACrBC,EAASwE,EAAYxE,OAC3ByE,EAAyB,aAAXC,EAAyBD,EAAazE,EAASyE,EAAazE,CAC9E,CAEApJ,EAAa7C,MAAQ0Q,EAGrBzQ,EAAoB4C,EAAahD,GAAI6Q,EAAY,CAAExQ,QAAS4P,EAAOpK,YAAavF,WAAYsL,IAE5FS,IACAC,GACJ,CACJ,CACJ,GACJ,CAsCYyE,CAAqBd,EACzB,GACJ,IAVIzQ,QAAQC,IAAI,+CAWpB,CAgDJ,SAASuR,EAAW7Q,GAChB,OAAOiG,KAAKiJ,IAAI,EAAGjJ,KAAK6K,IAAI9Q,EAAO,KACvC,CAGA,SAASkM,IACL,IAnBI6E,EAGAC,EAgBAC,GAnBAF,EArBe,EAOR9D,WAAWpO,SAASO,cAAc,SAASY,OAASnB,SAASO,cAAc,WAAWY,OAN1E,EAORiN,WAAWpO,SAASO,cAAc,gBAAgBY,QANvC,GAOTiN,WAAWpO,SAASO,cAAc,eAAeY,QANzC,EAOTiN,WAAWpO,SAASO,cAAc,iBAAiBY,QANxC,EAOTiN,WAAWpO,SAASO,cAAc,gBAAgBY,OAahEgR,EAAgB/K,KAAKiJ,IAAI,EAAGjJ,KAAK6K,IAAIC,EAAO,MAGhD1R,QAAQC,IAAI,uBAAwB0R,GAE7BA,GAYPC,EAAqBJ,EAAWI,GAEhC,IAAIvC,EAAS7P,SAASU,eAAe,4BACjCoP,EAAQ9P,SAASU,eAAe,6BAGhCmP,EAAO1O,OAAS0O,EAAOoC,KAAOG,EAAqBvC,EAAOoC,KAGnDpC,EAAO1O,OAAS0O,EAAOoC,OAF9BpC,EAAO1O,MAAQiR,EACftC,EAAMjJ,YAAcuL,GAOxBvC,EAAOwC,UAAW,CACtB,CAmCA,SAAS/E,IACL,IAAIgF,GAfsB,EAAIlE,WAAWpO,SAASO,cAAc,iBAAiBY,OAN5D,IAOI,EAAIiN,WAAWpO,SAASO,cAAc,gBAAgBY,OAN3D,IAOQiN,WAAWpO,SAASO,cAAc,gBAAgBY,OANvD,GAOIiN,WAAWpO,SAASO,cAAc,eAAeY,OANtD,IAS8F,EAAI,IAUxHmR,EAAoBN,EAAWM,GAE/B,IAmDgCnR,EAnD5B0O,EAAS7P,SAASU,eAAe,qBACjCoP,EAAQ9P,SAASU,eAAe,qBAEpCmP,EAAO1O,MAAQmR,EACfxC,EAAMjJ,aA+C0B1F,EA/CemR,IAgDlC,GAAW,mBACpBnR,GAAS,GAAW,cACpBA,GAAS,GAAW,WACpBA,GAAS,GAAW,OACjB,YAjDP0O,EAAOwC,UAAW,EAGlB,IAAIE,EAAY1C,EAAO2C,WAAU,GACjC3C,EAAO9C,WAAW0F,aAAaF,EAAW1C,EAC9C,CAv6BA7P,SAASW,iBAAiB,4BAA4BC,SAAQ,SAAAqQ,GAE1D/D,EAA0B+D,EADLA,EAAOyB,uBAEhC,IAgW+B1S,SAASW,iBAAiB,qBAClCC,SAAQ,SAAA+R,GACnBA,EAAG/L,aAAa,YAAa,QAC7B+L,EAAG1S,iBAAiB,YAAakL,EACrC,IA9URnL,SAASW,iBAAiB,SAASC,SAAQ,SAAAC,GACvCA,EAAMZ,iBAAiB,SAAS,WAC5BO,QAAQC,IAAI,SAADsE,OAAUlE,EAAMG,GAAE,gBAAA+D,OAAelE,EAAMM,QAElDN,EAAMsD,UAAUb,OAAO,cACvBzC,EAAMsD,UAAUqH,IAAI,eACxB,GACJ,IA2VAxL,SAASO,cAAc,mBAAmBN,iBAAiB,UAAU,SAAS0L,GAC1E5K,IACAP,QAAQC,IAAI,oBAAqBkL,EAAEzK,OAAOC,OAC1Cc,EAAe0J,EAAEzK,OAAOC,MAGxB,IAAMyR,EAAmB5S,SAASU,eAAe,qBAC3CmS,EAAkB7S,SAASU,eAAe,oBAC1CoS,EAAmB9S,SAASU,eAAe,qBAC3CqS,EAAgB/S,SAASU,eAAe,kBAQ9C,OALAkS,EAAiBvO,MAAM2O,QAAU,OACjCH,EAAgBxO,MAAM2O,QAAU,OAChCF,EAAiBzO,MAAM2O,QAAU,OACjCD,EAAc1O,MAAM2O,QAAU,OAEtB/Q,GACJ,IAAK,UACD2Q,EAAiBvO,MAAM2O,QAAU,QACjC,MACJ,IAAK,SACDH,EAAgBxO,MAAM2O,QAAU,QAChC,MACJ,IAAK,UACDF,EAAiBzO,MAAM2O,QAAU,QACjC,MACJ,IAAK,OACDD,EAAc1O,MAAM2O,QAAU,QAC9B,MACJ,QACIxS,QAAQ4L,MAAM,yBAADrH,OAA0B9C,IAK/CK,EAAEe,UAAU,KAAKC,SAzmCrB,SAAmB2P,GACf,OAAOA,GACH,IAAK,SACmBjT,SAASU,eAAe,UAAUS,MACtDyH,IACA,MACJ,IAAK,UAGD5B,EAFckM,SAASlT,SAASU,eAAe,iBAAiBS,MAAO,IACxDiN,WAAWpO,SAASU,eAAe,kBAAkBS,QAEpE,MACJ,IAAK,UACWnB,SAASU,eAAe,iBAAiBS,MACzCnB,SAASU,eAAe,kBAAkBS,MACtDuI,IACA,MACJ,IAAK,OACDS,IAGRxB,GACJ,CAqlCIwK,CAAUlR,EACd,IAKIjC,SAASO,cAAc,aAAaN,iBAAiB,UAAU,SAAS0L,GACpE,GAAuB,YAAnBA,EAAEzK,OAAOC,MAAqB,CAC9B,IAAMiS,EAAW,MAAHrO,OAAS4G,EAAEzK,OAAOC,MAAK,SACrCX,QAAQC,IAAI,sBAAuB2S,GAEnCjT,GAAGkT,KAAKD,GAAUE,MAAK,SAAAC,IAtJ/B,SAAmBA,GACf,IAAMC,EAAQxT,SAASO,cAAc,kBACrCiT,EAAMC,UAAY,GAElB,IAAIpC,EAAUG,OAAOkC,KAAKH,EAAK,IAC3BI,EAAY3T,SAAS2G,cAAc,MACvC0K,EAAQzQ,SAAQ,SAACqQ,EAAQK,GACrB,IAAIsC,EAAK5T,SAAS2G,cAAc,MAChCiN,EAAG/M,YAAcoK,EACH,IAAVK,GACAsC,EAAG3T,iBAAiB,SAAS,kBAAM4T,kBAAkB5C,EAAQK,EAAOiC,EAAMlC,EAAQ,IAEtFsC,EAAU7M,YAAY8M,EAC1B,IACAJ,EAAM1M,YAAY6M,GAGlBJ,EAAK3S,SAAQ,SAACuQ,EAAS2C,GACnB,IAAIzI,EAAMrL,SAAS2G,cAAc,MAEjC0K,EAAQzQ,SAAQ,SAACqQ,EAAQ8C,GACrB,IAAI3I,EACc,IAAd2I,IACA3I,EAAOpL,SAAS2G,cAAc,OACzBE,YAAcsK,EAAQF,GAC3B7F,EAAKnL,iBAAiB,SAAS,WAC3BO,QAAQC,IAAI,cAADsE,OAAeoM,EAAQF,GAAO,YAC7C,OAEA7F,EAAOpL,SAAS2G,cAAc,OACzBC,aAAa,qBAAsBqK,GACxC7F,EAAKxE,aAAa,aAAa,GAC/BwE,EAAKnL,iBAAiB,YAAakL,GACnCC,EAAKnL,iBAAiB,UAAWsN,IAErCnC,EAAKvE,YAAcsK,EAAQF,GAC3B5F,EAAIvE,YAAYsE,EACpB,IAEAoI,EAAM1M,YAAYuE,EACtB,IACA0F,GAEJ,CA4GYiD,CAAUT,EACd,GACJ,MACIvT,SAASO,cAAc,kBAAkB8D,MAAM2O,QAAU,MAEjE,IAKoBhT,SAASW,iBAAiB,kCAClCC,SAAQ,SAAAC,GAChBA,EAAMZ,iBAAiB,WAAYiD,GACnCrC,EAAMZ,iBAAiB,OAAQyM,EACnC,IA2PuB1M,SAASW,iBAAiB,sDAClCC,SAAQ,SAAAqQ,GACfA,EAAOgD,MAAQ,uBACfhD,EAAOhR,iBAAiB,cAAc,WAClC,IAAMiU,EAAYjD,EAAOpK,YACzBoK,EAAOgD,MAAQ,yBAAHlP,OAA4BmP,EAC5C,GACJ,IAsHJnD,IAsEJ/Q,SAASW,iBAAiB,gBAAgBC,SAAQ,SAAAC,GAC9CA,EAAMZ,iBAAiB,SAAS,WAC5BoN,GACJ,GACJ,IAGAnB,OAAOiI,OAAS9G,EAqDhBrN,SAASU,eAAe,sBAAsBT,iBAAiB,SAAS,WACpED,SAASU,eAAe,sBAAsBmG,YAAcuN,KAAKjT,KACrE,IAQAnB,SAASC,iBAAiB,oBAAoB,SAACa,GAE3Cd,SAASU,eAAe,4BAA4BmG,YAAc7G,SAASU,eAAe,4BAA4BS,MAEtHnB,SAASU,eAAe,qBAAqBmG,YAAc7G,SAASU,eAAe,qBAAqBS,KAC5G,IA+BAnB,SAASW,iBAAiB,gBAAgBC,SAAQ,SAAAC,GAC9CA,EAAMZ,iBAAiB,SAAS,WAC5BqN,GACJ,GACJ,IAGApB,OAAOiI,OAAS,WAER,IAAIE,EAAkBrU,SAASU,eAAe,4BAC9CV,SAASU,eAAe,4BAA4BmG,YAAcwN,EAAgBlT,MAGlF,IAAImT,EAAqBtU,SAASU,eAAe,qBACjDV,SAASU,eAAe,qBAAqBmG,YAAcyN,EAAmBnT,MAElFnB,SAASW,iBAAiB,gBAAgBC,SAAQ,SAAAC,GAC9CA,EAAMZ,iBAAiB,SAAS,WAC5BoN,IACAC,GACJ,GACJ,IACAD,IACAC,GACJ,EAiCAyD,IAyBA/Q,SAASU,eAAe,kBAAkBT,iBAAiB,SAAS,WAtBpE,IAAqBsU,EAGbC,EAGAC,EAGAC,EATaH,EAuBAvU,SAASO,cAAc,eApBpCiU,GADa,IAAIG,eACMC,kBAAkBL,GAGzCE,EAAc,6BAA+BI,KAAKC,SAASC,mBAAmBP,MAG9EE,EAAO1U,SAAS2G,cAAc,MAC7BC,aAAa,OAAQ6N,GAC1BC,EAAK9N,aAAa,WAaM,0BAVxB5G,SAAS6L,KAAK/E,YAAY4N,GAC1BA,EAAKM,QAGLhV,SAAS6L,KAAKpF,YAAYiO,EAO9B,IAEA1U,SAASO,cAAc,eAAeN,iBAAiB,SAAS,SAAS0L,GACrE,IAAM1E,GAAS0E,EAAEzK,OAAOC,MACpB8F,EAAQ,EACRgO,aAAa,wCAEbC,aACAvT,EAAesF,EACflB,IAER,IAEI/F,SAASO,cAAc,SAASN,iBAAiB,SAAS,SAAS0L,GAC/D,IAAMwJ,GAAQxJ,EAAEzK,OAAOC,MACnBgU,GAAQ,GAAKA,GAAQ,MACrBvT,EAAUuT,EACVpP,IAER,IAEA/F,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtE,IAAMyJ,GAAOzJ,EAAEzK,OAAOC,MAClBiU,GAAO,GAAKA,EAAM,MAClBvT,EAAQuT,EACRrP,IAER,IAEA/F,SAASO,cAAc,eAAeN,iBAAiB,SAAS,SAAS0L,GACrE,IAAMpK,GAASoK,EAAEzK,OAAOC,MACpBI,EAAQ,GAAKA,EAAQ,MACrBO,EAAYP,EACZwE,IACA4C,IAER,IAEA3I,SAASO,cAAc,iBAAiBN,iBAAiB,SAAS,SAAS0L,GACvE,IAAMyJ,GAAOzJ,EAAEzK,OAAOC,MAClBiU,GAAO,GAAKA,EAAM,MAClBrT,EAASqT,EACTrP,IAER,IAEA/F,SAASO,cAAc,gBAAgBN,iBAAiB,SAAS,SAAS0L,GACtE,IAAMpK,GAASoK,EAAEzK,OAAOC,MACpBI,EAAQ,GAAKA,GAAS,IACtBW,EAAaX,EACbwE,IACA4C,KACOpH,EAAQ,IAIf2O,EAFuBlQ,SAASU,eAAe,mBAClB,iEAGrC,IAMAwL,OAAOjM,iBAAiB,UAAU,WAC9B6E,IACAiB,GAKJ,IA/5DAzB,MAAM,KAAM,CACVC,QAAS,SAAC8Q,GAAS,OAAKA,EAAU9O,aAAa,qBAAqB,EACpE/B,UAAW,MACXC,WAAW,EACXC,UAAW,QACXC,OAAO,GA+5Db,G","sources":["webpack://na-webpack/./src/index.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n   // Assuming `svg` is your SVG object and `width`, `height` are its dimensions\n   let svg = d3.select(\"svg\");\n   svg.attr(\"overflow\", \"hidden\");\n\n\n\n   const instructionParagraph = document.querySelector('.instruction-box p');\n   console.log(\"Selected Element:\", instructionParagraph);\n   const visualizationGroup = document.getElementById(\"visualization\");\n\n\n   const numberInputs = document.querySelectorAll('input[type=\"number\"]');\n   numberInputs.forEach(input => {\n    input.addEventListener('input', function(event) {\n        // Call clearLegend with the specific input's ID\n        clearLegend(input.id);\n        // Also update the visualization and legend as if it was a new drag-and-drop\n        const newValue = event.target.value;\n        // You may need additional logic here to determine the meta information\n        // such as rowName and columnName, or decide to remove the legend entry entirely\n        // if it doesn't apply for manual inputs\n        updateVisualization(input.id, newValue, { rowName: 'Manual', columnName: 'Input' });\n    });\n});\n\n   let width = svg.node().getBoundingClientRect().width;\n   let height = svg.node().getBoundingClientRect().height;\n   let designCounter = 2;\n   let polygonSides = 3;\n   let minSize = 10;\n   let loops = 5;\n   let loopWidth = 20;\n   let joints = 6;\n   let jointRadius = 5;\n   let initialRadius = 50; \n   let currentShape = 'polygon';\n   let jointWidth = 5; \n   //new\n   let visualizationMappings = {};\n\n\n   var currentData = [];\n\n   const g_rulers = svg.append('g').attr('id', 'rulers');\n   const g_shapes = svg.append('g').attr('id', 'shapes');\n   const g = svg.append('g');\n\n\n//Get the Bounding Box of the Pattern:\n\n\n   const dpi = 96;  // Adjust this based on your display\n   const pixelsPerCm = dpi / 2.54;  // How many pixels represent a centimeter\n   \n   updateRuler(1); \n\n// Modify the zoomed function to include ruler drawing:\nfunction zoomed(event) {\n    g.attr('transform', event.transform);\n}\n\n\nconst legendDiv = document.querySelector('.legend');\nconst legendHeight = legendDiv.offsetHeight;\n\n\n\n\n    // Adjust the SVG's dimensions based on the legend margins\nlet svgWidth = svg.node().getBoundingClientRect().width;\nlet svgHeight = svg.node().getBoundingClientRect().height - legendHeight;\n\n\n    \n    // Define the clipping path\n    const clip = svg.append(\"defs\")\n        .append(\"clipPath\")\n        .attr(\"id\", \"clip\")\n        .append(\"rect\")\n        .attr(\"width\", svgWidth)\n        .attr(\"height\", svgHeight);\n    \n    // Apply the clipping path to your shapes group\n    g_shapes.attr(\"clip-path\", \"url(#clip)\");\n    \n// Apply the clipping path to your shapes group\ng_shapes.attr(\"clip-path\", \"url(#clip)\");\n\n//Zoom \n\n    const zoom = d3.zoom()\n    .scaleExtent([0.1, 10])  // This sets the minimum and maximum zoom levels. Adjust as needed.\n    .on('zoom', zoomed);\n\nsvg.call(zoom);\n\n\n// Place this function at the top level of your script so it's accessible throughout\nfunction clearHeaderIndicator(inputElement) {\n    let headerIndicator = inputElement.nextElementSibling;\n    if (headerIndicator && headerIndicator.classList.contains('column-header-indicator')) {\n        headerIndicator.remove(); // This removes the header indicator span element.\n        inputElement.style.width = '100%'; // Reset the input width if necessary.\n    }\n}\n\n\n// Attach the event listener to all number inputs\ndocument.querySelectorAll('input[type=\"number\"]').forEach(input => {\n    input.addEventListener('input', () => clearHeaderIndicator(input));\n});\n\n\n// Define the function to handle drag over event\nfunction handleDragOver(event) {\n    event.preventDefault(); // This is necessary to allow the drop\n    // Additional functionality as needed for dragover\n}\n\n\nfunction updateRuler(scale) {\n    // Clear the existing ruler elements\n    g_rulers.selectAll(\"*\").remove();\n\n    // Pixels per cm adjusted for the zoom scale\n    const scaledPixelsPerCm = pixelsPerCm * scale;\n\n    // Calculate the maximum width and height in cm based on the SVG size\n    const maxCmWidth = width / scaledPixelsPerCm;\n    const maxCmHeight = height / scaledPixelsPerCm;\n\n    // Horizontal Ruler\n    for (let i = 0; i <= maxCmWidth; i++) {\n        const xPos = i * scaledPixelsPerCm;\n        g_rulers.append(\"line\")\n            .attr(\"x1\", xPos)\n            .attr(\"y1\", 10)\n            .attr(\"x2\", xPos)\n            .attr(\"y2\", 0)\n            .attr(\"stroke\", \"black\");\n\n        if (i % 1 === 0) {  // Only label whole centimeters\n            g_rulers.append(\"text\")\n                .attr(\"x\", xPos)\n                .attr(\"y\", 20)\n                .text(i)\n                .attr(\"font-size\", \"10px\")\n                .attr(\"text-anchor\", \"middle\");\n        }\n    }\n\n    // Vertical Ruler\n    for (let j = 0; j <= maxCmHeight; j++) {\n        const yPos = j * scaledPixelsPerCm;\n        g_rulers.append(\"line\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", yPos)\n            .attr(\"x2\", 15)\n            .attr(\"y2\", yPos)\n            .attr(\"stroke\", \"black\");\n\n        if (j % 1 === 0) {  // Only label whole centimeters\n            g_rulers.append(\"text\")\n                .attr(\"x\", 20)\n                .attr(\"y\", yPos)\n                .text(j)\n                .attr(\"font-size\", \"10px\")\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"alignment-baseline\", \"middle\");\n        }\n    }\n}\n\n\nfunction zoomed(event) {\n    g.attr('transform', event.transform);\n    updateRuler(event.transform.k);\n}\n\n\n//Reset Zoom button:\n\n\n   \n   console.log(\"Computed Width:\", width);  \n   console.log(\"Computed Height:\", height);  \n   \n// Tooltip for table headers\ntippy('th', {\n    content: 'Click to divide the values in this column',\n    placement: 'top', // you can choose: 'top', 'bottom', 'left', 'right'\n    allowHTML: true, // if you want to allow HTML inside the tooltip\n    animation: 'scale', // animation style, e.g., 'scale', 'shift-toward', 'perspective'\n    arrow: true // if you want an arrow on the tooltip\n  });\n  \n// Tooltip for shape, joint and loop pop up\n\n  tippy('.info-icon', {\nplacement: 'right', // or whichever placement you prefer\nallowHTML: true, // allows HTML in the tooltip content\nanimation: 'scale',\narrow: true\n});\n   \ntippy('.info-icon2', {\n    onShow(instance) {\n        console.log(instance.content); // This should log the content of the tooltip\n    },\n    placement: 'top',\n    allowHTML: true,\n    animation: 'scale',\n    arrow: true\n});\n\n// Function to initialize tooltips on table headers\nfunction initializeTooltips() {\n    tippy('th', {\n      content: (reference) => reference.getAttribute('data-tippy-content'),\n      placement: 'top',\n      allowHTML: true,\n      animation: 'scale',\n      arrow: true\n    });\n  }\n  \n\n\n    const centerVisualization = () => {\n        const svgWidth = svg.node().getBoundingClientRect().width;\n        const svgHeight = svg.node().getBoundingClientRect().height;\n        g.attr('transform', `translate(${svgWidth / 2}, ${svgHeight / 2})`);\n    };\n\n    centerVisualization();\n\n\n    \n\n//for legend\ndocument.getElementById('legendDesign1').innerText = \"Legend\";\n\n\n\n\nlet jointRotation = 0;  // Default rotation value\n\n\n\n\n//draggable devider for rigth side\nconst divider = document.getElementById('divider');\nlet isDragging = false;\n\n// Start dragging\ndivider.addEventListener('mousedown', function(e) {\n  e.preventDefault();\n  isDragging = true;\n});\n\n// Dragging\ndocument.addEventListener('mousemove', function(e) {\n  if (!isDragging) return;\n  let offsetRight = document.body.offsetWidth - (e.clientX - document.body.offsetLeft);\n  let minWidth = 200; // Minimum width of the right section\n  let maxWidth = window.innerWidth - minWidth; // Maximum width of the left section\n  if (offsetRight > minWidth && offsetRight < maxWidth) {\n    document.querySelector('.right-section').style.width = `${offsetRight}px`;\n    document.querySelector('.left-section').style.width = `calc(100% - ${offsetRight}px)`;\n  }\n});\n\n// Stop dragging\ndocument.addEventListener('mouseup', function(e) {\n  isDragging = false;\n});\n\n\n//new 2\nfunction getActiveSVG() {\n    const activeDesign = document.querySelector('.design[style=\"display: block;\"]');\n    console.log(\"Active Design:\", activeDesign.id);  // Add this line\n\n    let svg = d3.select(activeDesign).select('svg');\n    if (svg.select('g').empty()) { \n        const visualizationContainer = document.querySelector('.visualization');\n        const centerX = visualizationContainer.clientWidth / 2;\n        const centerY = visualizationContainer.clientHeight / 2;\n        svg.append('g').attr('transform', `translate(${centerX},${centerY})`);\n    }\n    svg.select('g').selectAll('*').remove();  \n    \n    if (svg.select('text.legend').empty()) {\n        svg.append('text')\n            .attr('class', 'legend')\n            .attr('x', 10)\n            .attr('y', svg.node().getBoundingClientRect().height - 10)\n            .attr('font-size', '12px');\n    }\n    \n    return svg.select('g');  \n}\n\n// NEW\nfunction drawShape(shapeType) {\n    switch(shapeType) {\n        case 'circle':\n            const baseRadius = +document.getElementById('radius').value || 50;\n            drawCircle(baseRadius);\n            break;\n        case 'polygon':\n            const sides = parseInt(document.getElementById('polygon-sides').value, 10);\n            const radius = parseFloat(document.getElementById('polygon-radius').value);\n            drawPolygon(sides, radius);\n            break;\n        case 'ellipse':\n            const rx = +document.getElementById('ellipse-width').value || 50;\n            const ry = +document.getElementById('ellipse-height').value || 50;\n            drawEllipse(rx, ry);\n            break;\n        case 'line':\n            drawLine(); // No parameters are passed because it fetches them internally\n            break;   \n    }\n    updateInstructionWithSize();\n}\n\n\nfunction clearLegend(inputId = null) {\n    const activeLegend = document.querySelector(`#legend${getActiveDesign()}`);\n    if (inputId) {\n        // Remove only the legend entry related to the provided inputId\n        let entry = activeLegend.querySelector(`div[data-input=\"${inputId}\"]`);\n        if (entry) {\n            entry.remove();\n        }\n    } else {\n        // Remove all entries if no inputId is provided\n        activeLegend.querySelectorAll('div[data-input]').forEach(entry => {\n            entry.remove();\n        });\n    }\n}\n\n\n//START over\n\n function resetPolygonInputs() {\n    document.querySelector('#poly-sides').value = 3;\n    document.querySelector('#size').value = 10;\n    document.querySelector('#loop-number').value = 5;\n    document.querySelector('#loop-width').value = 20;\n    document.querySelector('#joint-number').value = 6;\n    document.querySelector('#joint-width').value = 5;\n }\n\nfunction resetCircleInputs() {\n    document.querySelector('#radius').value = 50;\n    document.querySelector('#loop-number').value = 5;\n    document.querySelector('#loop-width').value = 20;\n    document.querySelector('#joint-number').value = 6;\n    document.querySelector('#joint-width').value = 5;\n}\n\nfunction resetEllipseInputs() {\n    document.querySelector('#ellipse-width').value = 30;\n    document.querySelector('#ellipse-height').value = 50;\n    document.querySelector('#loop-number').value = 5;\n    document.querySelector('#loop-width').value = 20;\n    document.querySelector('#joint-number').value = 6;\n    document.querySelector('#joint-width').value = 5;\n}\n\nfunction resetLineInputs() {\n    document.querySelector('#line-height').value = 300;\n    document.querySelector('#loop-number').value = 5;\n    document.querySelector('#loop-width').value = 20;\n    document.querySelector('#joint-number').value = 6;\n    document.querySelector('#joint-width').value = 5;\n}\n\n\nfunction resetInputStyles() {\n    const dataInputs = document.querySelectorAll('.data-input');\n    dataInputs.forEach(input => {\n        input.style.borderColor = \"\";\n        input.style.backgroundColor = \"\";\n        input.classList.remove('data-input');\n        input.classList.add('manual-input');\n    });\n    console.log(\"Styles should be reset!\");\n}\n\n\n\n\ndocument.querySelector('#shape-selector').addEventListener('change', function(e) {\n    console.log(\"Shape changed to:\", e.target.value); \n    currentShape = e.target.value;\n    \n    // Reset the inputs based on the selected shape\n    switch (currentShape) {\n        case 'polygon':\n            resetPolygonInputs();\n            drawPolygon(polygonSides, minSize); // Directly call the drawing function\n            break;\n        case 'circle':\n            resetCircleInputs();\n            drawCircle(); // Directly call the drawing function\n            break;\n        case 'ellipse':\n            resetEllipseInputs();\n            drawEllipse(); // Directly call the drawing function\n            break;\n        case 'line':\n            resetLineInputs();\n            drawLine(); // Directly call the drawing function\n            break;\n        default:\n            console.error(`Unhandled shape type: ${currentShape}`);\n            break;\n    }\n\n    resetInputStyles();\n\n});\n\n//start over \n\ndocument.getElementById('startOverBtn').addEventListener('click', function() {\n        // Resetting inputs for all shapes\n        resetPolygonInputs();\n        resetCircleInputs();\n        resetEllipseInputs();\n        resetLineInputs();\n\n    // Resetting inputs\n    document.getElementById('ellipse-width').value = 50;\n    document.getElementById('ellipse-height').value = 50;\n    // ... reset other inputs ...\n\n    // Clearing the SVG\n    g.selectAll('*').remove();\n    clearLegend(); \n\n\n        // Reset the styles for all elements with the class 'data-input'\n        const dataInputs = document.querySelectorAll('.data-input');\n        dataInputs.forEach(input => {\n            input.style.borderColor = \"\";\n            input.style.backgroundColor = \"\";\n            input.classList.remove('data-input');\n            input.classList.add('manual-input');\n        });\n        console.log(\"Styles should be reset!\");  \n    });      \n\n\n\n//legend\n\nfunction updateVisualization(inputId, newValue, meta = {}) {\n    console.log(\"Updating visualization:\", inputId, \"New Value:\", newValue, \"Meta:\", meta);\n\n\n    switch(inputId) {\n        // ... existing code ...\n    }\n    drawVisualization();  // Redraw the visualization with the new values\n    if (isDragDrop) {\n        // If the update is from a drag-and-drop, update the legend with meta data\n        updateLegend(inputId, `${meta.rowName}'s ${meta.columnName}: ${newValue}`, true);\n    } else {\n        // If the update is from a manual input, handle accordingly\n        // This could mean updating with different text or clearing the entry\n        updateLegend(inputId, `Manual Input: ${newValue}`, false);\n    }\n}\n\n\nfunction updateLegend(inputId, datasetValue, isDragDrop, sizeInfo = null) {\n    const legendId = \"legend\" + getActiveDesign();\n    const legendDiv = document.querySelector(`#${legendId}`);\n\n    // Fetch the input's description from the data-label attribute\n    const inputElement = document.getElementById(inputId);\n    const inputDescription = inputElement.getAttribute('data-label');\n    \n\n    // Remove existing legend entry for this input\n    const existingEntry = legendDiv.querySelector(`div[data-input=\"${inputId}\"]`);\n    if (existingEntry) {\n        legendDiv.removeChild(existingEntry);\n    }\n\n    // If this update was due to a drag and drop, add the legend entry\n    if (isDragDrop) {\n        const legendText = `${inputDescription} represents ${datasetValue}`;\n        \n        const entry = document.createElement('div');\n        entry.setAttribute('data-input', inputId);\n        entry.textContent = legendText;\n        legendDiv.appendChild(entry);\n    }\n\n    // Add the size info if provided\n    if (sizeInfo) {\n        const sizeEntry = document.createElement('div');\n        sizeEntry.textContent = sizeInfo;\n        legendDiv.appendChild(sizeEntry);\n    }\n}\n\n\n\nfunction drawPolygon(sides, radius, shift) {\n    // Round the sides to the nearest whole number\n    sides = Math.round(sides);\n\n    const angle = 2 * Math.PI / sides;\n    const perimeter = 2 * Math.PI * radius;\n    const gapLength = perimeter / joints; // Ensure 'joints' is defined elsewhere in your code\n    const anglePerJoint = 2 * Math.PI / joints; // Ensure 'joints' is defined elsewhere in your code\n\n    const coordinates = Array.from({ length: sides }, (_, i) => {\n        return [Math.cos(i * angle) * radius, Math.sin(i * angle) * radius];\n    });\n\n    g.append('path')\n        .attr('d', d3.line()(coordinates) + \"Z\")\n        .attr('stroke', 'black')\n        .attr('fill', 'none');\n\n    for (let i = 0; i < joints; i++) { // Ensure 'joints' is defined elsewhere in your code\n        const distance = i * gapLength + shift * perimeter;\n        let coveredDistance = 0;\n        for (let j = 0; j < sides; j++) {\n            const start = coordinates[j];\n            const end = coordinates[(j + 1) % sides];\n            const segmentLength = Math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2);\n            if (coveredDistance + segmentLength > distance) {\n                const ratio = (distance - coveredDistance) / segmentLength;\n                const jointX = start[0] + (end[0] - start[0]) * ratio;\n                const jointY = start[1] + (end[1] - start[1]) * ratio;\n                g.append('circle')\n                    .attr('cx', jointX)\n                    .attr('cy', jointY)\n                    .attr('r', jointRadius) // Ensure 'jointRadius' is defined elsewhere in your code\n                    .attr('fill', 'white');\n                break;\n            }\n            coveredDistance += segmentLength;\n        }\n    }\n    \n    // Ensure 'updateInstructionWithSize' function is defined elsewhere in your code and called appropriately\n    updateInstructionWithSize();\n}\n\n\n\n\nfunction drawCircle() {\n    console.log(\"Inside drawCircle function\");\n    g.selectAll('*').remove(); \n\n    const baseRadius = +document.getElementById('radius').value || 50;\n    let arcExtent = +document.getElementById('arc-extent').value || 360;\n\n    // Adjust arcExtent near 0 or 360 degrees\n    if (arcExtent <= 0) {\n        arcExtent = 0.1; // Slight offset from 0\n    } else if (arcExtent >= 360) {\n        arcExtent = 359.9; // Slight offset from 360\n    }\n\n    const anglePerJointOuter = (arcExtent * Math.PI / 180) / (joints - 1);\n    const halfShiftAngle = anglePerJointOuter / 2; \n\n    const orientation = +document.getElementById('arc-orientation').value || 0;\n    const orientationRadians = orientation * (Math.PI / 180);\n\n    for (let i = 0; i < loops; i++) {\n        const currentRadius = baseRadius + (loopWidth * i);\n        const shiftForCurrentLoop = (i % 2) * halfShiftAngle;\n\n        // Use SVG paths to create the arcs\n        const startX = Math.cos(orientationRadians) * currentRadius;\n        const startY = Math.sin(orientationRadians) * currentRadius;\n        const endX = Math.cos((arcExtent * Math.PI / 180) + orientationRadians) * currentRadius;\n        const endY = Math.sin((arcExtent * Math.PI / 180) + orientationRadians) * currentRadius;\n        const largeArcFlag = arcExtent <= 180 ? 0 : 1;\n\n        const pathData = `M ${startX} ${startY} A ${currentRadius} ${currentRadius} 0 ${largeArcFlag} 1 ${endX} ${endY}`;\n        console.log(\"startX:\", startX, \"startY:\", startY, \"currentRadius:\", currentRadius, \"largeArcFlag:\", largeArcFlag, \"endX:\", endX, \"endY:\", endY);\n\n        g.append('path')\n            .attr('d', pathData)\n            .attr('fill', 'none')\n            .attr('stroke', 'black');\n        console.log(\"Path Data:\", pathData);\n\n        for (let j = 0; j < joints; j++) {\n            const angle = j * anglePerJointOuter + shiftForCurrentLoop + orientationRadians;\n            const jointX = Math.cos(angle) * currentRadius;\n            const jointY = Math.sin(angle) * currentRadius;\n\n            g.append('circle')\n                .attr('cx', jointX)\n                .attr('cy', jointY)\n                .attr('r', jointRadius)\n                .attr('fill', 'white');\n        }\n        updateInstructionWithSize();\n    }\n}\n\n\n\n\ndocument.querySelector('#radius').addEventListener('input', function(e) {\n    const newRadius = e.target.value;\n    updateVisualization('radius', newRadius); // Call with the 'radius' inputId\n});\n\n\n\ndocument.querySelector('#arc-extent').addEventListener('input', function(e) {\n    const display = document.getElementById('arc-extent-display');\n    display.textContent = e.target.value;\n    drawCircle();\n});\n\ndocument.querySelector('#arc-orientation').addEventListener('input', function(e) {\n    const display = document.getElementById('arc-orientation-display');\n    display.textContent = e.target.value;\n    drawCircle();  // Redraw the circle with the new orientation.\n});\n\ndocument.querySelector('#loop-width').addEventListener('input', function(e) {\n    loopWidth = +e.target.value;\n    drawCircle(); // Redraw the circle when loop width changes\n});\n\ndocument.querySelector('#joint-width').addEventListener('input', function(e) {\n    jointWidth = +e.target.value; // Note: jointWidth might need to be adjusted based on your design (e.g., jointRadius = jointWidth / 2)\n    drawCircle(); // Redraw the circle when joint width changes\n});\n\ndocument.querySelector('#joint-number').addEventListener('input', function(e) {\n    joints = +e.target.value;\n    drawCircle(); // Redraw the circle when the number of joints changes\n});\n\ndocument.querySelector('#loop-number').addEventListener('input', function(e) {\n    loops = +e.target.value;\n    drawCircle(); // Redraw the circle when the number of loops changes\n});\n\n\n\nfunction drawEllipse() {\n    console.log(\"Inside drawEllipse function\");\n    g.selectAll('*').remove(); // Clear previous shapes\n\n    // Fetch values\n    const orientation = +document.getElementById('ellipse-orientation').value || 0;\n    let extent = +document.getElementById('ellipse-extent').value || 360;\n    const rx = +document.getElementById('ellipse-width').value || 50;\n    const ry = +document.getElementById('ellipse-height').value || 50;\n\n    // Adjust extent near 0 or 360 degrees\n    if (extent <= 0) {\n        extent = 0.1; // Slight offset from 0\n    } else if (extent >= 360) {\n        extent = 359.9; // Slight offset from 360\n    }\n\n    // Convert orientation to radians\n    const orientationRadians = orientation * (Math.PI / 180);\n\n    // Draw each loop of the ellipse\n    for (let i = 0; i < loops; i++) {\n        const currentRx = rx + (loopWidth * i);\n        const currentRy = ry + (loopWidth * i);\n        const shiftAngle = (i % 2 === 0) ? 0 : (Math.PI / joints);\n\n        // Calculate path for the ellipse\n        const startX = currentRx * Math.cos(orientationRadians);\n        const startY = currentRy * Math.sin(orientationRadians);\n        const endX = currentRx * Math.cos(orientationRadians + extent * Math.PI / 180);\n        const endY = currentRy * Math.sin(orientationRadians + extent * Math.PI / 180);\n        const largeArcFlag = extent <= 180 ? 0 : 1;\n\n        const pathData = `M ${startX} ${startY} A ${currentRx} ${currentRy} 0 ${largeArcFlag} 1 ${endX} ${endY}`;\n        g.append('path')\n            .attr('d', pathData)\n            .attr('fill', 'none')\n            .attr('stroke', 'black');\n        console.log(\"Path Data:\", pathData);\n\n        // Draw joints if needed\n        if (joints > 0) {\n            const anglePerJoint = (extent * Math.PI / 180) / (joints - 1);\n            for (let j = 0; j < joints; j++) {\n                const angle = j * anglePerJoint + shiftAngle + orientationRadians;\n                const jointX = currentRx * Math.cos(angle);\n                const jointY = currentRy * Math.sin(angle);\n\n                g.append('circle')\n                    .attr('cx', jointX)\n                    .attr('cy', jointY)\n                    .attr('r', jointRadius)\n                    .attr('fill', 'white');\n            }\n        }\n    }\n    updateInstructionWithSize();\n}\n\n\n\n\ndocument.querySelector('#ellipse-width').addEventListener('input', function(e) {\n    drawEllipse();\n});\n\ndocument.querySelector('#ellipse-height').addEventListener('input', function(e) {\n    drawEllipse();\n});\n\ndocument.querySelector('#loop-width ').addEventListener('input', function(e) {\n    if (currentShape === 'ellipse') {\n        loops = +e.target.value; \n        drawEllipse();\n    }\n});\n\ndocument.querySelector('#joint-width').addEventListener('input', function(e) {\n    if (currentShape === 'ellipse') {\n        jointWidth = +e.target.value; \n        drawEllipse();\n    }\n});\n\ndocument.querySelector('#joint-number').addEventListener('input', function(e) {\n    if (currentShape === 'ellipse') {\n        jointWidth = +e.target.value; // Update jointWidth\n        drawEllipse();\n    }\n});\n\n\ndocument.querySelector('#loop-number').addEventListener('input', function(e) {\n    if (currentShape === 'ellipse') {\n        loops = +e.target.value;  // Update the variable\n        drawEllipse();\n    }\n});\n\n\ndocument.querySelector('#ellipse-orientation').addEventListener('input', function(e) {\n    const display = document.getElementById('ellipse-orientation-display');\n    display.textContent = e.target.value;\n    drawEllipse();  // Redraw the ellipse with the new orientation.\n});\n\ndocument.querySelector('#ellipse-extent').addEventListener('input', function(e) {\n    const display = document.getElementById('ellipse-extent-display');\n    display.textContent = e.target.value;\n    drawEllipse();  // Redraw the ellipse with the new extent.\n});\n\n\n\n// Listener for the 'size' input (already provided)\n\n// Fetches values from the DOM and draws the line and its associated features.\nfunction drawLine() {\n    const activeSVG = getActiveSVG();\n\n    // Clear any previous drawings\n    g_shapes.selectAll('*').remove();\n\n    // Define starting point\n    const startX = -50;  // You can adjust this if needed\n    const startY = -70;  // You can adjust this if needed\n\n    // Fetch values from the DOM\n    const height = +document.getElementById('line-height').value;\n    console.log(\"Height fetched from DOM:\", height); // Logging the fetched height\n\n    const loops = +document.getElementById('loop-number').value;\n    const loopWidth = +document.getElementById('loop-width').value;\n    const joints = +document.getElementById('joint-number').value;\n    const jointWidth = +document.getElementById('joint-width').value;\n    console.log(\"Loop Width fetched from DOM:\", loopWidth);\n    console.log(\"Joints fetched from DOM:\", joints);\n    console.log(\"Joint Width fetched from DOM:\", jointWidth);\n\n    // Draw base line\n    g.append(\"line\")\n    .attr(\"x1\", startX)\n        .attr(\"y1\", startY)\n        .attr(\"x2\", startX)\n        .attr(\"y2\", startY + height)\n        .attr(\"stroke\", \"black\");\n\n    // Draw parallel lines\n    drawParallelLines(startX, startY, height, loops, loopWidth);\n    \n    // Draw joints\n    drawJoints(startX, startY, height, loops, loopWidth, joints, jointWidth);\n}\n\nfunction drawParallelLines(startX, startY, height, loops, loopWidth) {\n    for(let i = 1; i <= loops; i++) {\n        g.append(\"line\")\n            .attr(\"x1\", startX + i * loopWidth)\n            .attr(\"y1\", startY)\n            .attr(\"x2\", startX + i * loopWidth)\n            .attr(\"y2\", startY + height)\n            .attr(\"stroke\", \"black\");\n\n            console.log(\"Base line start:\", startX, startY);\n            console.log(\"Base line end:\", startX, startY + height);\n\n            // Inside drawParallelLines function\n            console.log(`Parallel line ${i} start: ${startX + i * loopWidth}, ${startY}`);\n            console.log(`Parallel line ${i} end: ${startX + i * loopWidth}, ${startY + height}`);\n\n    }\n    updateInstructionWithSize ();\n}\n\nfunction drawJoints(startX, startY, height, loops, loopWidth, joints, jointWidth) {\n    const spacing = height / (joints + 1);\n    const lineStrokeWidth = loopWidth;  // Assuming the line's stroke width is the same as loopWidth\n\n    for(let j = 0; j <= loops; j++) {\n        const isOddLine = j % 2 !== 0;\n        const maxJoints = isOddLine ? joints + 1 : joints;  // Odd lines get an extra joint\n        \n        for(let i = 1; i <= maxJoints; i++) {\n            let yPosition;\n            if (!isOddLine) {\n                // Even lines\n                yPosition = startY + i * spacing;\n            } else {\n                // Odd lines\n                yPosition = startY + (i - 0.5) * spacing;  // Adjust for half-spacing\n            }\n            \n            g.append(\"rect\")\n                .attr(\"x\", startX + j * loopWidth - lineStrokeWidth / 2)\n                .attr(\"y\", yPosition - jointWidth / 2) // Adjust y to center the rectangle on the joint position\n                .attr(\"width\", lineStrokeWidth)\n                .attr(\"height\", jointWidth)\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"none\"); // No stroke to ensure the rectangle looks like a gap\n\n\n            // Inside drawJoints function\n            console.log(`Joint ${i} on line ${j}: x = ${startX + j * loopWidth}, y = ${yPosition}`);\n\n        }\n    }\n}\n\n\n\n\n// Listener for the 'size' input (already provided)\n\ndocument.querySelector('#line-height').addEventListener('input', function(e) {\n    \n    if (currentShape === 'line') {\n        drawLine();\n        }\n});\n\n// Listener for the 'loop-number' input\ndocument.querySelector('#loop-number').addEventListener('input', function(e) {\n    console.log('Loop number changed');  \n    if (currentShape === 'line') {\n        drawLine();\n\n    }\n});\n\n\n\n// Listener for the 'loop-width' input\ndocument.querySelector('#loop-width').addEventListener('input', function(e) {\n    console.log('Loop width changed');  \n    if (currentShape === 'line') {\n       drawLine();\n        console.log('Loop Width:', loopWidth);\n        updateInstructionWithSize(loopWidth); \n    }\n});\n\n// Listener for the 'joint-number' input\ndocument.querySelector('#joint-number').addEventListener('input', function(e) {\n    console.log('joint number changed');  \n    if (currentShape === 'line') {\n        drawLine();\n    }\n});\n\n// Listener for the 'joint-width' input\ndocument.querySelector('#joint-width').addEventListener('input', function(e) {\n    console.log('joint width changed');  \n     if (currentShape === 'line') {\n        drawLine();\n        console.log('Joint Width:', jointWidth);\n\n    }\n});\n\n// If there are any other inputs that affect the line, add similar event listeners for them as well.\n\nfunction getActiveDesign() {\n    const activeDesign = document.querySelector('.design[style=\"display: block;\"]');\n    return activeDesign.id;\n}\n\n\nfunction handleDragStart(event) {\n    const cell = event.target; // Get the cell that started the drag\n    const row = cell.closest('tr');\n    console.log('Drag Start on row:', row);\n\n    document.querySelectorAll('#dataset-table tr:not(:first-child)').forEach(r => {\n        if (r !== row) {\n            r.classList.add('inactive-row');\n            console.log('Adding inactive-row to:', r);\n        }\n    });\n\n    row.classList.add('active-row');\n    console.log('Adding active-row to:', row);\n    cell.classList.add('highlighted-cell'); // Highlight the cell being dragged\n\n    // Set the drag data\n    event.dataTransfer.setData('text/plain', event.target.textContent);\n    event.dataTransfer.setData('text/rowHeader', row.getAttribute('data-row-header'));\n    event.dataTransfer.setData('text/columnHeader', event.target.getAttribute('data-column-header'));\n}\ndocument.querySelectorAll('input[type=\"number\"]').forEach(input => {\n    input.addEventListener('mousedown', function(event) {\n        if (input.classList.contains('data-input')) {\n            // Ask for confirmation to override the data-driven value\n            const isConfirmed = confirm('Do you want to override the data-driven value with your custom input?');\n            \n            if (!isConfirmed) {\n                // Prevent the mousedown event if the user cancels\n                event.preventDefault();\n                return false;\n            }\n        }\n    });\n});\n\n\n\n\n// Make sure the 'columnToInputMappings' object is defined globally\n\n//Global Storage for Column-to-Input Mappings\nlet columnToInputMappings = {};\n\n\n\nfunction handleDrop(event) {\n    event.preventDefault();\n\n    const newValue = event.dataTransfer.getData('text/plain');\n    const columnHeader = event.dataTransfer.getData('text/columnHeader');\n    const inputElement = event.target.closest('input');\n\n    if (inputElement) {\n        inputElement.value = newValue;\n        inputElement.classList.add('data-input');\n\n        // Check if the next sibling is a column indicator, if not create one\n        let columnIndicator = inputElement.nextElementSibling;\n        if (!columnIndicator || !columnIndicator.classList.contains('column-header-indicator')) {\n            columnIndicator = document.createElement('span');\n            columnIndicator.className = 'column-header-indicator';\n            inputElement.parentNode.insertBefore(columnIndicator, inputElement.nextSibling);\n        }\n        \n        columnIndicator.textContent = columnHeader;\n        inputElement.style.width = `calc(100% - ${columnIndicator.offsetWidth}px)`;\n\n        // Attach click listener to the column indicator\n        attachHeaderClickListener(columnIndicator, inputElement);\n\n        columnToInputMappings[columnHeader] = { id: inputElement.id, operation: null, factor: null };\n        updateVisualization(inputElement.id, newValue, { columnName: columnHeader });\n   \n   \n        console.log(\"Input value set to:\", inputElement.value);\n\n        // Call to update sliders\n        updateSliderPosition();\n        updateCountabilitySliderPosition();\n\n        // Debugging after calling update functions\n        console.log(\"Slider update functions called\");\n    }\n}\n\n\n\n\n// Call this function once to set up the click listeners for existing headers\ndocument.querySelectorAll('.column-header-indicator').forEach(header => {\n    const inputElement = header.previousElementSibling;\n    attachHeaderClickListener(header, inputElement);\n});\n\n\nfunction handleDragEnd(event) {\n    console.log(\"Drag End called\");\n    event.target.classList.remove('highlighted-cell'); // Remove highlight from the cell\n   \n}\nattachDragEventListeners();\n\n\nfunction attachDragEventListeners() {\n    const cells = document.querySelectorAll('#dataset-table td');\n    cells.forEach(cell => {\n        cell.setAttribute('draggable', true);\n        cell.addEventListener('dragstart', handleDragStart);\n        cell.addEventListener('dragend', handleDragEnd);\n    });\n}\n\n\n\ndocument.querySelectorAll('input').forEach(input => {\n    input.addEventListener('input', function() {\n        console.log(`Input ${input.id} changed to ${input.value}`);\n\n        input.classList.remove('data-input');\n        input.classList.add('manual-input');\n    });\n});\n    \n\n\n// 2. Function to attach click listener to column header\n\nfunction attachHeaderClickListener(headerElement, inputElement) {\n    headerElement.addEventListener('click', function(event) {\n        // Check if the clicked element is the factor input to prevent re-triggering the initial setup\n        if (event.target.className !== 'factor-input') {\n            performValueAdjustment(inputElement, headerElement.textContent);\n        }\n    });\n}\nfunction performValueAdjustment(inputElement, columnHeader) {\n    console.log(`performValueAdjustment called for ${columnHeader}`);\n    if (!columnToInputMappings[columnHeader]?.operation) {\n        // Initial setup with a prompt\n        const userInput = prompt(`Enter operation (multiply/divide) and factor for \"${columnHeader}\":`, 'multiply 2');\n        if (userInput) {\n            const [operation, factor] = userInput.split(' ');\n            setupInitialOperation(inputElement, columnHeader, operation, parseFloat(factor));\n        }\n    } else {\n        console.log(`Attempting to focus on .factor-input for ${columnHeader}`);\n        const parent = inputElement.parentNode;\n        console.log(`Parent node:`, parent);\n        console.log(`Children of parent node:`, parent.children);\n        const factorInput = parent.querySelector('.factor-input');\n        if (factorInput) {\n            console.log(`.factor-input found for ${columnHeader}, focusing now.`);\n            factorInput.focus();\n        } else {\n            console.log(`.factor-input not found for ${columnHeader}, unable to focus.`);\n        }\n    }\n}\n\n\nfunction setupInitialOperation(inputElement, columnHeader, operation, factor) {\n    // Store the initial value and operation details\n    columnToInputMappings[columnHeader] = {\n        id: inputElement.id,\n        operation: operation,\n        factor: factor,\n        originalValue: parseFloat(inputElement.value)\n  \n    };\n\n    // Calculate and update value\n    const newValue = (operation === 'multiply') ? columnToInputMappings[columnHeader].originalValue * factor : columnToInputMappings[columnHeader].originalValue / factor;\n    inputElement.value = newValue;\n\n    // Update visualization\n    updateVisualization(inputElement.id, newValue, { columnName: columnHeader });\n    updateOperationText(inputElement, columnHeader, operation, factor);\n    updateSliderPosition();  // Assuming this function updates a slider related to the operation\n    updateCountabilitySliderPosition();  // Assuming this function updates another slider\n}\n\nfunction updateOperationText(inputElement, columnHeader, operation, factor) {\n    console.log('updateOperationText called', { columnHeader, operation, factor });\n\n    // Check if the column indicator already exists\n    let columnIndicator = inputElement.nextElementSibling;\n    console.log('Existing columnIndicator:', columnIndicator);\n\n    if (!columnIndicator || !columnIndicator.classList.contains('column-header-indicator')) {\n        console.log('Creating new columnIndicator');\n        columnIndicator = document.createElement('div');\n        columnIndicator.className = 'column-header-indicator';\n        inputElement.parentNode.insertBefore(columnIndicator, inputElement.nextSibling);\n    }\n\n    // Check if the factor input already exists\n    let factorInput = columnIndicator.querySelector('.factor-input');\n    console.log('factorInput before update:', factorInput);\n\n    if (!factorInput) {\n        console.log('Creating new factorInput');\n        factorInput = document.createElement('input');\n        factorInput.className = 'factor-input';\n        factorInput.type = 'text';\n        factorInput.value = factor;\n        factorInput.addEventListener('change', (event) => {\n            console.log('Factor input changed:', event.target.value);\n            const newFactor = parseFloat(event.target.value);\n            if (!isNaN(newFactor)) {\n                console.log('Updating operation with new factor:', newFactor);\n                updateOperation(inputElement, columnHeader, operation, newFactor);\n            } else {\n                console.log('New factor is NaN. No update performed.');\n            }\n        });\n        columnIndicator.appendChild(factorInput);\n    } else {\n        console.log('Updating existing factorInput value');\n        factorInput.value = factor;\n    }\n\n    // Update operation text\n    let operationText = columnIndicator.firstChild;\n    if (!operationText || operationText.nodeType !== Node.TEXT_NODE) {\n        console.log('Creating new operationText node');\n        operationText = document.createTextNode('');\n        columnIndicator.insertBefore(operationText, factorInput);\n    }\n    console.log('Updating operation text node value');\n    operationText.nodeValue = `${columnHeader} ${operation === 'multiply' ? '*' : '/'}`;\n}\n\n\n\nfunction updateOperation(inputElement, columnHeader, operation, newFactor) {\n    const originalValue = columnToInputMappings[columnHeader]?.originalValue || parseFloat(inputElement.value);\n    const newValue = (operation === 'multiply') ? originalValue * newFactor : originalValue / newFactor;\n    inputElement.value = newValue;\n    columnToInputMappings[columnHeader] = { id: inputElement.id, operation, factor: newFactor, originalValue };\n    updateVisualization(inputElement.id, newValue, { columnName: columnHeader });\n\n    // Update the operation text to show the new factor\n    const columnIndicator = inputElement.nextElementSibling;\n    if (columnIndicator && columnIndicator.classList.contains('column-header-indicator')) {\n        columnIndicator.textContent = `${columnHeader} ${operation === 'multiply' ? '*' : '/'}${newFactor}`;\n    }\n}\n\n\n\n    \nfunction updateVisualization(inputId, newValue, meta = {}) {\n    switch(inputId) {\n        case 'poly-sides':\n            polygonSides = +newValue;\n            break;\n        case 'size':\n            minSize = +newValue;\n            break;\n        case 'loop-number':\n            loops = +newValue;\n            break;\n        case 'loop-width':\n            loopWidth = +newValue;\n            break;\n        case 'joint-number':\n            joints = +newValue;\n            break;\n        case 'joint-width':\n            jointRadius = +newValue / 2;\n            break;\n                case 'ellipse-width':\n            // Update ellipse width\n            // Assuming you have a global variable or a setter method for ellipse width\n            ellipseWidth = +newValue;\n            if (currentShape === 'ellipse') {\n                drawEllipse();\n            }\n            break;\n\n        case 'ellipse-height':\n            // Update ellipse height\n            // Assuming you have a global variable or a setter method for ellipse height\n            ellipseHeight = +newValue;\n            if (currentShape === 'ellipse') {\n                drawEllipse();\n            }\n            break;\n\n            case 'ellipse-width':\n                // Update ellipse width\n                // Assuming you have a global variable or a setter method for ellipse width\n                ellipseWidth = +newValue;\n                if (currentShape === 'ellipse') {\n                    drawEllipse();\n                }\n                break;\n    \n            case 'ellipse-height':\n                // Update ellipse height\n                // Assuming you have a global variable or a setter method for ellipse height\n                ellipseHeight = +newValue;\n                if (currentShape === 'ellipse') {\n                    drawEllipse();\n                }\n                break;\n                case 'line-height':\n                    // Update line height\n                    // Assuming you have a global variable or a setter method for line height\n                    lineHeight = +newValue;\n                    if (currentShape === 'line') {\n                        drawLine();\n                    }\n                    break;\n        case 'radius':\n            // Assuming drawCircle uses the radius directly from the input field\n            drawCircle();\n            break;\n        default:\n            console.error(`Unhandled input id: ${inputId}`);\n            return;  // Exit the function if the inputId is not handled\n    }\n    drawVisualization();  // Redraw the visualization with the new values\n    updateLegend(inputId, `${meta.rowName}'s ${meta.columnName}: ${newValue}`, true); // Update the legend\n}\n\n    \n    \n\n    function handleDragOver(e) {\n        e.preventDefault();\n    }\n\n\n    \n    // function handleHeaderClick(header, index, data, headers) {\n    //     let divisor = prompt(`Enter the divisor for the column '${header}':`, 1);\n    //     divisor = parseFloat(divisor);\n    //     if (!isNaN(divisor) && divisor !== 0) {\n    //         let newHeader = `${header} / ${divisor}`;\n    //         if (!headers.includes(newHeader)) {\n    //             headers.push(newHeader); // Adding new header\n    //             data.forEach(row => {\n    //                 row[newHeader] = (parseFloat(row[header]) / divisor).toFixed(2);\n    //             });\n    //         } else {\n    //             data.forEach(row => {\n    //                 row[newHeader] = (parseFloat(row[header]) / divisor).toFixed(2);\n    //             });\n    //         }\n    //         drawTable(data); // Redrawing the table with the updated data\n    //     } else {\n    //         alert(\"Invalid divisor entered.\");\n    //     }\n    // }\n    \n    function updateHeadersAndRedrawTable(newHeaders, newData) {\n        // Assuming you have a global headers variable\n        globalHeaders = newHeaders;\n    \n        // Redraw the table with new headers and data\n        drawTable(newData);\n    }\n\n    var headers = [];\n    \n    function drawTable(data) {\n        const table = document.querySelector('#dataset-table');\n        table.innerHTML = \"\"; // Clear existing table content\n    \n        let headers = Object.keys(data[0]);\n        let headerRow = document.createElement('tr');\n        headers.forEach((header, index) => {\n            let th = document.createElement('th');\n            th.textContent = header;\n            if (index !== 0) { // Assuming first column is not for division\n                th.addEventListener('click', () => handleHeaderClick(header, index, data, headers));\n            }\n            headerRow.appendChild(th);\n        });\n        table.appendChild(headerRow);\n    \n        // Create rows with data\n        data.forEach((rowData, rowIndex) => {\n            let row = document.createElement('tr');\n    \n            headers.forEach((header, cellIndex) => {\n                let cell;\n                if (cellIndex === 0) {\n                    cell = document.createElement('th'); // Using 'th' for the first cell as a row header\n                    cell.textContent = rowData[header]; // Populate row header with data\n                    cell.addEventListener('click', () => {\n                        console.log(`Row header ${rowData[header]} clicked`);\n                    });\n                } else {\n                    cell = document.createElement('td'); // Regular cells\n                    cell.setAttribute('data-column-header', header); // Ensure this is correctly set\n                    cell.setAttribute('draggable', true);\n                    cell.addEventListener('dragstart', handleDragStart);\n                    cell.addEventListener('dragend', handleDragEnd);\n                }\n                cell.textContent = rowData[header];\n                row.appendChild(cell);\n            });\n    \n            table.appendChild(row);\n        });\n        attachRowHeaderClickListeners();\n\n    }\n    \n//     function changeColumnDivision(header, newDivisor, data) {\n//         // Calculate new values and update the data\n//         const newHeader = header + ' / ' + newDivisor;\n//         data.forEach(row => {\n//             if (row[header] !== undefined) {\n//                 row[newHeader] = (parseFloat(row[header]) / newDivisor).toFixed(2);\n//             }\n//         });\n    \n//         // Remove the old divided column if it exists\n//         headers = headers.filter(h => !h.startsWith(header + ' / ') || h === newHeader);\n    \n//         // Redraw the table with the updated data\n//         drawTable(data);\n//     }\n\n// // Assuming currentData is your global variable holding the current dataset\n\n// function deleteColumn(headerToDelete, index, data) {\n//     // Remove the column from headers\n//     headers.splice(index, 1);\n\n//     // Update each row in the currentData\n//     data.forEach(row => {\n//         delete row[headerToDelete];\n//     });\n\n//     // Redraw the table with the updated data\n//     drawTable(data);\n// }\n\n    \n    function attachDragEventListeners() {\n        const draggableItems = document.querySelectorAll('#dataset-table td');\n        draggableItems.forEach(td => {\n            td.setAttribute('draggable', 'true');\n            td.addEventListener('dragstart', handleDragStart);\n        });\n    }\n    \n\n    function openDesign(designName) {\n        // Get all elements with class=\"design\" and hide them\n        var i, designContent;\n        designContent = document.getElementsByClassName(\"design\");\n        for (i = 0; i < designContent.length; i++) {\n            designContent[i].style.display = \"none\";\n        }\n        // Show the current tab\n        document.getElementById(designName).style.display = \"block\";\n    \n        // Ensure that the SVG is being drawn for the active design\n        drawVisualization();\n        centerVisualization();\n    }\n    \n\ndocument.querySelector('#shape-selector').addEventListener('change', function(e) {\n    clearLegend();  // Clear the legend\n    console.log(\"Shape changed to:\", e.target.value); \n    currentShape = e.target.value;\n    \n    // References to the containers\n    const polygonContainer = document.getElementById('polygon-container');\n    const circleContainer = document.getElementById('circle-container');\n    const ellipseContainer = document.getElementById('ellipse-container');\n    const lineContainer = document.getElementById('line-container');\n\n    // Hide all shape-specific containers first\n    polygonContainer.style.display = 'none';\n    circleContainer.style.display = 'none';\n    ellipseContainer.style.display = 'none';\n    lineContainer.style.display = 'none';\n    // Display the container corresponding to the selected shape\n    switch (currentShape) {\n        case 'polygon':\n            polygonContainer.style.display = 'block';\n            break;\n        case 'circle':\n            circleContainer.style.display = 'block';\n            break;\n        case 'ellipse':\n            ellipseContainer.style.display = 'block';\n            break;\n        case 'line':\n            lineContainer.style.display = 'block';\n            break;\n        default:\n            console.error(`Unhandled shape type: ${currentShape}`);\n            break;\n    }\n\n    // Clear the SVG content and draw the new shape\n    g.selectAll('*').remove();\n    drawShape(currentShape);\n});\n\n    \n    \n\n    document.querySelector('#datasets').addEventListener('change', function(e) {\n        if (e.target.value !== \"default\") {\n            const filePath = `../${e.target.value}.json`;\n            console.log(\"Attempting to load:\", filePath);\n\n            d3.json(filePath).then(data => {\n                drawTable(data);\n            });\n        } else {\n            document.querySelector('#dataset-table').style.display = \"none\"; // Hide table for manual input\n        }\n    });\n\n\n\n    \n    const inputFields = document.querySelectorAll('.controls input[type=\"number\"]');\n    inputFields.forEach(input => {\n        input.addEventListener('dragover', handleDragOver);\n        input.addEventListener('drop', handleDrop);\n    });\n\n\n    function drawVisualization() {\n        \n        g.selectAll('*').remove();\n        console.log(\"Drawing visualization for:\", currentShape);\n\n\n        if (currentShape === 'polygon') {\n            for (let i = 0; i < loops; i++) {\n                drawPolygon(polygonSides, minSize + (loopWidth * i), (i % 2) * (1 / (2 * joints)));\n            }\n        } else if (currentShape === 'circle') {\n            drawCircle();\n        } \n\n        if (currentShape === 'ellipse') {\n            drawEllipse(); // Assuming you have a function like this\n        } else if (currentShape === 'line') {\n            drawLine(); // Assuming you have a function like this\n        }\n        \n        updateInstructionWithSize();\n    }\n\n    //new\n    \n\n   \n    //Calculate the Bounding Box of the SVG Content\n\n    function computeSVGBoundsInCM() {\n        const content = d3.select('svg').node();\n        const bbox = content.getBBox();\n        console.log(\"Bounding Box in Pixels:\", bbox);  // Log the pixel dimensions\n    \n        const cmDimensions = {\n            width: bbox.width / pixelsPerCm,\n            height: bbox.height / pixelsPerCm\n        };\n        \n        console.log(\"Bounding Box in CM:\", cmDimensions);  // Log the CM dimensions\n    \n        return cmDimensions;\n    }\n\n\n    function updateInstructionWithSize() {\n       \n        console.log(\"Function updateInstructionWithSize called\");\n        \n        const bbox = g.node().getBBox();\n        \n        // Log the bounding box details to console\n        console.log(\"Bounding Box:\", bbox);\n    \n        const widthInCm = (bbox.width / pixelsPerCm).toFixed(2);\n        const heightInCm = (bbox.height / pixelsPerCm).toFixed(2);\n            // Determine the maximum dimension\n        const maxSize = Math.max(widthInCm, heightInCm);\n\n    // Update the size indicator slider\n    updateSizeIndicator(maxSize);\n\n        let sizeInfo = `Size: Width: ${widthInCm} cm, Height: ${heightInCm} cm`;\n        console.log(\"Size Info:\", sizeInfo);\n    \n        // Set the primary size information\n        instructionParagraph.textContent = sizeInfo;  // Add this line\n    \n        const instructionBox = instructionParagraph.parentElement;\n\n        \n        instructionBox.querySelectorAll('.warning').forEach(warning => warning.remove());\n\n   // Zoom out warning\n   if (widthInCm > 50 || heightInCm > 30) {\n    addWarning(instructionBox, \"Zoom out to see the whole pattern. To adjust pattern size, consider remapping by dividing the values in variable section!\");\n}\n\n// Narrow loop warning\nif (loopWidth < 10) {\n    addWarning(instructionBox, \"The loops are too narrow and they may burn in laser cutting. Consider increasing their size.\");\n}\n\n// Wide joint warning\nif (jointWidth > 20) {\n    addWarning(instructionBox, \"The joints are too wide and leave minimal space for expansion.\");\n}\n\n\n\n\n// Too many joints warning\nif (joints > 20 && jointWidth > 10) {\n    addWarning(instructionBox, \"There are too many joints and they leave minimal cut area.\");\n}\n\n    \n\n    \n    function updateSizeIndicator(maxSize) {\n            const slider = document.getElementById('sizeIndicatorRange');\n            const label = document.getElementById('sizeIndicatorValue'); // Ensure this is the correct ID for the label\n        \n            if (slider) {\n                const sliderMax = parseFloat(slider.getAttribute('max'));\n                const value = (maxSize / sliderMax) * 100; // Normalize the value to the slider's range\n                slider.value = value;\n        \n                // Round the value to the nearest integer\n                const roundedValue = Math.round(value);\n        \n                // Update the label with the rounded value\n                label.textContent = roundedValue;\n            } else {\n                console.error('Size indicator slider not found');\n            }\n            \n            \n            updateWarnings();\n    }\n        \n  \n\n\n        function updateWarnings() {\n            const instructionBox = document.querySelector('.instruction-box'); // Replace with your actual selector\n        \n            // Clear existing warnings\n            instructionBox.querySelectorAll('.warning').forEach(warning => warning.remove());\n        \n            // Add warnings based on current input values\n            if (loopWidth < 10) {\n                console.log(\"Adding narrow loop warning\"); // Log when this condition is met\n\n                addWarning(instructionBox, \"The loops are too narrow and they may burn in laser cutting. Consider increasing their size.\");\n            }\n        \n        \n            if (jointWidth > 20) {\n                addWarning(instructionBox, \"The joints are too wide and leave minimal space for expansion.\");\n            }\n        \n            if (joints > 30) {\n                addWarning(instructionBox, \"There are too many joints and they leave minimal cut area.\");\n            }\n        \n        }\n\n\n    // Draw the bounding box (red rectangle) around the g group's content\n        g.append('rect')\n           .attr('x', bbox.x)\n           .attr('y', bbox.y)\n           .attr('width', bbox.width)\n           .attr('height', bbox.height)\n           .attr('stroke', 'none')\n           .attr('stroke-width', '3')  // make it a bit thicker for visibility\n           .attr('fill', 'none');\n    }\n    \n    function addWarning(parentElement, warningText) {\n        // Use the warning text as a unique identifier\n        const warningId = warningText.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();\n    \n        // Check if the warning already exists\n        let warningElement = parentElement.querySelector(`[data-warning=\"${warningId}\"]`);\n    \n        if (!warningElement) {\n            warningElement = document.createElement(\"span\");\n            warningElement.textContent = warningText;\n            warningElement.style.color = \"red\";\n            warningElement.setAttribute('data-warning', warningId);\n            warningElement.classList.add(\"warning\");\n    \n            parentElement.appendChild(warningElement);\n        }\n    }\n    \n\n\n    \n    // function triggerChangeEvent(elementId) {\n    //     let event = new Event('change', {\n    //         'bubbles': true,\n    //         'cancelable': true\n    //     });\n    //     document.getElementById(elementId).dispatchEvent(event);\n    // }\n\n    \n\n    // function remapSize() {\n    //     console.log(\"Inside remap function\");\n    \n    //     // Fetch user's desired width\n    //     const desiredWidth = parseFloat(document.getElementById('desiredWidth').value);\n    //     console.log(\"Desired Width:\", desiredWidth);\n\n    //     // Compute the current pattern width in CM\n    //     const currentSize = computeSVGBoundsInCM();\n    //     console.log(\"Current Size:\", currentSize);\n\n    //     const currentWidth = currentSize.width;\n    //     console.log(\"Current Width:\", currentWidth);\n\n    //     // If current width is more than desired width, we need to remap\n    //     if (currentWidth > desiredWidth) {\n    //         const scalingFactor = desiredWidth / currentWidth;\n    \n    //         // Adjust parameters based on scaling factor\n    //         // Adjusting loop width\n    //         const loopWidthInput = document.getElementById('loop-width');\n    //         const newLoopWidth = parseFloat(loopWidthInput.value) * scalingFactor;\n    //         loopWidthInput.value = newLoopWidth.toFixed(2);  // Limiting to 2 decimal places for cleanliness\n    //         triggerChangeEvent('loop-width');\n    \n    //         // Adjusting number of loops\n    //         const loopNumberInput = document.getElementById('loop-number');\n    //         const newLoopNumber = Math.max(1, Math.round(parseFloat(loopNumberInput.value) * scalingFactor));\n    //         loopNumberInput.value = newLoopNumber;\n    //         triggerChangeEvent('loop-number');\n    \n    //         // Adjusting Min Size (for polygons)\n    //         const sizeInput = document.getElementById('size');\n    //         const newSize = parseFloat(sizeInput.value) * scalingFactor;\n    //         sizeInput.value = newSize.toFixed(2);\n    //         triggerChangeEvent('size');\n    \n    //         // Redraw based on the current shape after updating values\n    //         switch (currentShape) {\n    //             case 'polygon':\n    //                 drawPolygon(/* appropriate parameters */);\n    //                 break;\n    //             case 'circle':\n    //                 drawCircle();\n    //                 break;\n    //             case 'ellipse':\n    //                 drawEllipse();\n    //                 break;\n    //         }\n    //          // Force redraw of the SVG element\n              \n    //     }\n    // } // Closing bracket for remapSize\n    \n\n//Hover for Row Headers\n    function addRowHeaderTooltips() {\n        const rowHeaders = document.querySelectorAll('#dataset-table tr:not(:first-child) th:first-child');\n        rowHeaders.forEach(header => {\n            header.title = 'Hover to see options'; // Default tooltip message\n            header.addEventListener('mouseenter', function() {\n                const rowHeader = header.textContent; // e.g., 'Week 1'\n                header.title = `Apply same mapping to ${rowHeader}`; // Update tooltip message\n            });\n        });\n    }\n    addRowHeaderTooltips();\n\n\n    function getRowData(rowElement) {\n        const rowData = {};\n        const headers = document.querySelectorAll('#dataset-table th');\n        rowElement.querySelectorAll('td').forEach((cell, index) => {\n            // If the first column is not a data column (e.g., row header), adjust the index\n            const columnHeader = headers[index + 1].textContent; // +1 if the first column is not a data column\n            rowData[columnHeader] = cell.textContent;\n        });\n        return rowData;\n    }\n    \n    \n    \n    \n    function applySameMapping(newHeader) {\n        console.log(\"Applying mapping to new header: \", newHeader.textContent);\n\n        if (lastMappedColumnIndex !== null) {\n            const cells = newHeader.parentElement.querySelectorAll('td');\n            if (cells[lastMappedColumnIndex]) {\n                const valueToMap = cells[lastMappedColumnIndex].textContent;\n                const inputId = resolveInputIdFromIndex(lastMappedColumnIndex);\n                if (inputId) {\n                    updateInputAndVisualization(inputId, valueToMap);\n                }\n            }\n        }\n    }\n\n    function handleRowHeaderClick(header) {\n        // Highlight the clicked row and unhighlight others\n        const allRows = document.querySelectorAll('#dataset-table tr:not(:first-child)');\n        allRows.forEach(row => {\n            row.classList.remove('active-row');\n            row.classList.add('inactive-row');\n        });\n    \n        const clickedRow = header.parentElement;\n        clickedRow.classList.add('active-row');\n        clickedRow.classList.remove('inactive-row');\n        \n        // Get the data from the clicked row\n        const rowData = getRowData(clickedRow);\n        Object.entries(rowData).forEach(([columnHeader, value]) => {\n            const mappingInfo = columnToInputMappings[columnHeader];\n            if (mappingInfo) {\n                const inputElement = document.getElementById(mappingInfo.id || mappingInfo);\n                if (inputElement) {\n                    let finalValue = parseFloat(value);\n        \n                    // Check and apply stored operation if any\n                    if (mappingInfo.operation) {\n                        const opType = mappingInfo.operation;\n                        const factor = mappingInfo.factor;\n                        finalValue = (opType === 'multiply') ? finalValue * factor : finalValue / factor;\n                    }\n        \n                    inputElement.value = finalValue;\n        \n                    // Update the visualization\n                    updateVisualization(inputElement.id, finalValue, { rowName: header.textContent, columnName: columnHeader });\n                    // Call to update sliders\n                    updateSliderPosition();\n                    updateCountabilitySliderPosition();\n                }\n            }\n        });\n    }\n    \n    \n    \n    function applyOperation(value, operation, factor) {\n        if (operation === 'multiply') {\n            return value * factor;\n        } else if (operation === 'divide') {\n            return value / factor;\n        }\n        return value;\n    }\n    \n\n    \n\n\n    function updateInputAndVisualization(inputId, value) {\n        console.log(`Updating input ${inputId} with value: ${value}`);\n        const inputElement = document.getElementById(inputId);\n        if (inputElement) {\n            inputElement.value = value;\n            const event = new Event('input', { bubbles: true });\n            inputElement.dispatchEvent(event);\n        }\n    }\n    \n    function attachRowHeaderClickListeners() {\n        const rowHeaders = document.querySelectorAll('#dataset-table tr th:first-child');\n        if(rowHeaders.length === 0) {\n            console.log(\"No row headers found to attach listeners to.\");\n            return;\n        }\n    \n        rowHeaders.forEach(header => {\n            header.addEventListener('click', () => {\n                console.log(`Row header clicked: ${header.textContent}`);\n                // Code to handle the row header click\n                handleRowHeaderClick(header);\n            });\n        });\n    }\n    \n    \n    \n    // Call this function again if the table is redrawn\n    attachRowHeaderClickListeners();\n    \n\n    \n\n\n//Flimsy and stiffness\nfunction calculateExpandability() {\n    // Define the weights for each parameter\n    const weightSize = 1; // Positive impact\n    const weightNumLoops = 2; // Positive impact\n    const weightWidthLoops = -.5; // Negative impact\n    const weightNumJoints = -1; // Negative impact\n    const weightWidthJoints = -1; // Negative impact\n\n    // Get the parameter values\n    let size = parseFloat(document.querySelector('#size').value || document.querySelector('#radius').value);\n    let numLoops = parseFloat(document.querySelector('#loop-number').value);\n    let widthLoops = parseFloat(document.querySelector('#loop-width').value);\n    let numJoints = parseFloat(document.querySelector('#joint-number').value);\n    let widthJoints = parseFloat(document.querySelector('#joint-width').value);\n\n    // Calculate the impacts\n    let impactSize = size * weightSize;\n    let impactNumLoops = numLoops * weightNumLoops;\n    let impactWidthLoops = widthLoops * weightWidthLoops;\n    let impactNumJoints = numJoints * weightNumJoints;\n    let impactWidthJoints = widthJoints * weightWidthJoints;\n\n    // Calculate the total score\n    let score = impactSize + impactNumLoops + impactWidthLoops + impactNumJoints + impactWidthJoints;\n\n    // Normalize the score between 0 and 100\n    let expandability = Math.max(0, Math.min(score, 100));\n\n    // Debugging logs\n    console.log(\"Expandability score:\", expandability);\n\n    return expandability;\n}\n\n\n\nfunction clampValue(value) {\n    return Math.max(0, Math.min(value, 100));\n}\n\n\nfunction updateSliderPosition() {\n    let expandabilityScore = calculateExpandability();\n    expandabilityScore = clampValue(expandabilityScore);\n\n    let slider = document.getElementById('stiffnessFlimsinessRange');\n    let label = document.getElementById('stiffnessFlimsinessValue');\n\n    // Check if the slider is at the minimum and the new score is higher\n    if (slider.value == slider.min && expandabilityScore > slider.min) {\n        slider.value = expandabilityScore;\n        label.textContent = expandabilityScore;\n    } else if (slider.value != slider.min) {\n        slider.value = expandabilityScore;\n        label.textContent = expandabilityScore;\n    }\n\n    // Keep the slider disabled to prevent manual adjustments\n    slider.disabled = true;\n}\n\n\n// Call this function on input changes and on window load\ndocument.querySelectorAll('.input-field').forEach(input => {\n    input.addEventListener('input', function() {\n        updateSliderPosition();\n    });\n});\n\n// Ensure updateSliderPosition is called on window load\nwindow.onload = updateSliderPosition;\n\nfunction calculateCountability() {\n    // Example max values, adjust as needed\n    const maxNumJoints = 40;\n    const maxNumLoops = 50;\n    const maxWidthJoints = 20;\n    const maxWidthLoops = 50;\n\n    // Fetch and normalize values\n    let numJointsNormalized = 1 - parseFloat(document.querySelector('#joint-number').value) / maxNumJoints;\n    let numLoopsNormalized = 1 - parseFloat(document.querySelector('#loop-number').value) / maxNumLoops;\n    let widthJointsNormalized = parseFloat(document.querySelector('#joint-width').value) / maxWidthJoints;\n    let widthLoopsNormalized = parseFloat(document.querySelector('#loop-width').value) / maxWidthLoops;\n\n    // Calculate countability score\n    let countabilityScore = (numJointsNormalized + numLoopsNormalized + widthJointsNormalized + widthLoopsNormalized) / 4 * 100;\n\n    return countabilityScore;\n}\n\n\n\n\nfunction updateCountabilitySliderPosition() {\n    let countabilityScore = calculateCountability();\n    countabilityScore = clampValue(countabilityScore);\n\n    let slider = document.getElementById('countabilityRange');\n    let label = document.getElementById('countabilityValue');\n\n    slider.value = countabilityScore;\n    label.textContent = getCountabilityDescription(countabilityScore);\n\n    // Disable the slider\n    slider.disabled = true;\n\n    // Remove any existing event listeners by replacing the slider with its clone\n    let newSlider = slider.cloneNode(true);\n    slider.parentNode.replaceChild(newSlider, slider);\n}\n\n\n\n\n// Update the label for stiffness-flimsiness slider\n// Event listener for the stiffness-flimsiness slider\n// document.getElementById('stiffnessFlimsinessRange').addEventListener('input', function() {\n//     document.getElementById('stiffnessFlimsinessValue').textContent = this.value;\n// });\n\n// If you have more sliders, repeat the pattern:\n// Event listener for the size indicator slider (if it's not disabled)\ndocument.getElementById('sizeIndicatorRange').addEventListener('input', function() {\n    document.getElementById('sizeIndicatorValue').textContent = this.value; // Make sure 'sizeIndicatorValue' is the correct ID for the span\n});\n\n// Event listener for the countability slider\n// document.getElementById('countabilityRange').addEventListener('input', function() {\n//     document.getElementById('countabilityValue').textContent = this.value;\n// });\n\n// Ensure this JavaScript runs after the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    // Initialize the value labels\n    document.getElementById('stiffnessFlimsinessValue').textContent = document.getElementById('stiffnessFlimsinessRange').value;\n    // Repeat for other sliders\n    document.getElementById('countabilityValue').textContent = document.getElementById('countabilityRange').value;\n});\n\n\nfunction getExpandabilityDescription(value) {\n    if (value <= 10) return \"Very Low\";\n    if (value <= 30) return \"Low\";\n    if (value <= 60) return \"Moderate\";\n    if (value <= 80) return \"High\";\n    return \"Very High\";\n}\n\nfunction getCountabilityDescription(value) {\n    if (value <= 20) return \"Very Challenging\";\n    if (value <= 40) return \"Challenging\";\n    if (value <= 60) return \"Moderate\";\n    if (value <= 80) return \"Easy\";\n    return \"Very Easy\";\n}\n\n\n// function getSizeDescription(value) {\n//     if (value <= 10) return \"Very Small\";\n//     if (value <= 30) return \"Small\";\n//     if (value <= 60) return \"Medium\";\n//     if (value <= 80) return \"Large\";\n//     return \"Very Large\";\n// }\n\n\n\n// Call this function on input changes and on window load\ndocument.querySelectorAll('.input-field').forEach(input => {\n    input.addEventListener('input', function() {\n        updateCountabilitySliderPosition();\n    });\n});\n\n// Attach event listeners to the input fields and call update functions on window load\nwindow.onload = function() {\n        // Initialize the stiffness-flimsiness slider value label\n        let stiffnessSlider = document.getElementById('stiffnessFlimsinessRange');\n        document.getElementById('stiffnessFlimsinessValue').textContent = stiffnessSlider.value;\n    \n        // Initialize the countability slider value label\n        let countabilitySlider = document.getElementById('countabilityRange');\n        document.getElementById('countabilityValue').textContent = countabilitySlider.value;\n    \n    document.querySelectorAll('.input-field').forEach(input => {\n        input.addEventListener('input', function() {\n            updateSliderPosition();\n            updateCountabilitySliderPosition();\n        });\n    });\n    updateSliderPosition();\n    updateCountabilitySliderPosition();\n};\n\n\nfunction resolveInputIdFromIndex(index) {\n    console.log(`Resolving input ID for index: ${index}`);\n    // Array mapping the cell index to the input field IDs\n    const idMapping = ['size', 'poly-sides', 'radius', 'arc-extent', 'arc-orientation', 'ellipse-width', 'ellipse-height', 'line-height', 'loop-number', 'loop-width', 'joint-number', 'joint-width'];\n    return idMapping[index];\n}\n\n\n\n\n// Function to update visualization based on the row data\nfunction updateVisualizationFromRow(rowData) {\n    console.log(`Updating visualization: ${inputId} with value: ${newValue}`);\n    Object.entries(rowData).forEach(([inputId, value]) => {\n        console.log(`Updating inputId: ${inputId} with value: ${value}`);\n        const inputElement = document.getElementById(inputId);\n        if (inputElement && !inputElement.classList.contains('manual-input')) {\n            inputElement.value = value;\n            console.log(`Input ${inputId} updated to ${value}`);\n            const event = new Event('input', { bubbles: true });\n            inputElement.dispatchEvent(event);\n        } else {\n            console.log(`Input ${inputId} is manually entered or not found`);\n        }\n    });\n}\n\n\n//edit vak\n// Call this function after generating/updating the table\nattachRowHeaderClickListeners();\n\n    \nfunction downloadSVG(svgElement, filename) {\n    // 1. Serialize SVG to string\n    var serializer = new XMLSerializer();\n    var svgString = serializer.serializeToString(svgElement);\n\n    // 2. Encode SVG string\n    var encodedData = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));\n\n    // 3. Create download link\n    var link = document.createElement('a');\n    link.setAttribute('href', encodedData);\n    link.setAttribute('download', filename);\n\n    // 4. Trigger download\n    document.body.appendChild(link);  \n    link.click();\n    \n    // 5. Clean up\n    document.body.removeChild(link);\n}\n\n\ndocument.getElementById('downloadButton').addEventListener('click', function() {\n    var svgElement = document.querySelector('.design svg');  // Adjust selector as needed\n    downloadSVG(svgElement, 'downloaded_pattern.svg');\n});\n\ndocument.querySelector('#poly-sides').addEventListener('input', function(e) {\n    const sides = +e.target.value;\n    if (sides < 3) {\n        displayError(\"Polygon must have at least 3 sides.\");\n    } else {\n        clearError(); // Clear any existing error message\n        polygonSides = sides;\n        drawVisualization();\n    }\n});\n\n    document.querySelector('#size').addEventListener('input', function(e) {\n        const size = +e.target.value;\n        if (size >= 2 && size <= 100000) {\n            minSize = size;\n            drawVisualization();\n        }\n    });\n\n    document.querySelector('#loop-number').addEventListener('input', function(e) {\n        const num = +e.target.value;\n        if (num >= 0 && num < 1000) {\n            loops = num;\n            drawVisualization();\n        }\n    });\n\n    document.querySelector('#loop-width').addEventListener('input', function(e) {\n        const width = +e.target.value;\n        if (width > 1 && width < 200) {\n            loopWidth = width;\n            drawVisualization();\n            updateInstructionWithSize(loopWidth); \n        }\n    });\n\n    document.querySelector('#joint-number').addEventListener('input', function(e) {\n        const num = +e.target.value;\n        if (num >= 0 && num < 100) {\n            joints = num;\n            drawVisualization();\n        }\n    });\n\n    document.querySelector('#joint-width').addEventListener('input', function(e) {\n        const width = +e.target.value;\n        if (width > 1 && width <= 50) {\n            jointWidth = width;\n            drawVisualization(); // Assuming this function uses jointWidth\n            updateInstructionWithSize(jointWidth); // Call with the updated jointWidth\n        } else if (width > 50) {\n            // Show the warning for too wide joints\n            const instructionBox = document.getElementById('instruction-box'); // Replace with your actual element ID\n            const wideJointWarningText = \"The joints are too wide and leave minimal space for expansion.\";\n            addWarning(instructionBox, wideJointWarningText);\n        }\n    });\n    \n\n\n\n\n    window.addEventListener('resize', function() {\n        centerVisualization();\n        drawVisualization();\n\n    \n\n        \n    });\n    // window.remapSize = remapSize;\n  // Call this function after your table headers are generated/updated\n  initializeTooltips();\n\n});\n"],"names":["document","addEventListener","svg","d3","select","attr","instructionParagraph","querySelector","console","log","getElementById","querySelectorAll","forEach","input","event","clearLegend","id","newValue","target","value","updateVisualization","rowName","columnName","width","node","getBoundingClientRect","height","polygonSides","minSize","loops","loopWidth","joints","jointRadius","currentShape","jointWidth","g_rulers","append","g_shapes","g","pixelsPerCm","updateRuler","legendHeight","offsetHeight","svgWidth","svgHeight","zoom","scaleExtent","on","transform","k","handleDragOver","preventDefault","scale","selectAll","remove","scaledPixelsPerCm","maxCmWidth","maxCmHeight","i","xPos","text","j","yPos","call","inputElement","headerIndicator","nextElementSibling","classList","contains","style","tippy","content","placement","allowHTML","animation","arrow","onShow","instance","centerVisualization","concat","innerText","divider","isDragging","inputId","arguments","length","undefined","activeLegend","getActiveDesign","entry","resetPolygonInputs","resetCircleInputs","resetEllipseInputs","resetLineInputs","meta","drawVisualization","isDragDrop","updateLegend","datasetValue","sizeInfo","legendId","legendDiv","inputDescription","getAttribute","existingEntry","removeChild","legendText","createElement","setAttribute","textContent","appendChild","sizeEntry","drawPolygon","sides","radius","shift","Math","round","angle","PI","perimeter","gapLength","coordinates","Array","from","_","cos","sin","line","distance","coveredDistance","start","end","segmentLength","sqrt","pow","ratio","jointX","jointY","updateInstructionWithSize","drawCircle","baseRadius","arcExtent","anglePerJointOuter","halfShiftAngle","orientationRadians","currentRadius","shiftForCurrentLoop","startX","startY","endX","endY","largeArcFlag","pathData","drawEllipse","orientation","extent","rx","ry","currentRx","currentRy","shiftAngle","anglePerJoint","drawLine","activeDesign","empty","visualizationContainer","centerX","clientWidth","centerY","clientHeight","getActiveSVG","drawParallelLines","spacing","lineStrokeWidth","isOddLine","maxJoints","yPosition","drawJoints","handleDragStart","cell","row","closest","r","add","dataTransfer","setData","e","offsetRight","body","offsetWidth","clientX","offsetLeft","maxWidth","window","innerWidth","error","borderColor","backgroundColor","newRadius","confirm","columnToInputMappings","handleDrop","getData","columnHeader","columnIndicator","className","parentNode","insertBefore","nextSibling","attachHeaderClickListener","operation","factor","updateSliderPosition","updateCountabilitySliderPosition","handleDragEnd","headerElement","_columnToInputMapping","parent","children","factorInput","focus","userInput","prompt","_userInput$split2","_slicedToArray","split","originalValue","parseFloat","type","newFactor","isNaN","_columnToInputMapping2","updateOperation","operationText","firstChild","nodeType","Node","TEXT_NODE","createTextNode","nodeValue","updateOperationText","setupInitialOperation","performValueAdjustment","ellipseWidth","ellipseHeight","lineHeight","bbox","getBBox","widthInCm","toFixed","heightInCm","maxSize","slider","label","roundedValue","instructionBox","warning","addWarning","updateWarnings","updateSizeIndicator","max","parentElement","x","y","warningText","warningId","replace","toLowerCase","warningElement","color","attachRowHeaderClickListeners","rowHeaders","header","clickedRow","rowData","rowElement","headers","index","getRowData","Object","entries","_ref","_ref2","mappingInfo","finalValue","opType","handleRowHeaderClick","clampValue","min","score","expandability","expandabilityScore","disabled","countabilityScore","newSlider","cloneNode","replaceChild","previousElementSibling","td","polygonContainer","circleContainer","ellipseContainer","lineContainer","display","shapeType","parseInt","drawShape","filePath","json","then","data","table","innerHTML","keys","headerRow","th","handleHeaderClick","rowIndex","cellIndex","drawTable","title","rowHeader","onload","this","stiffnessSlider","countabilitySlider","svgElement","svgString","encodedData","link","XMLSerializer","serializeToString","btoa","unescape","encodeURIComponent","click","displayError","clearError","size","num","reference"],"sourceRoot":""}